[{"content":"免責事項 当サイトに掲載されている情報は、万全を期して調べたものではありますが、その内容の正確性や安全性を保証するものではありません。\n万が一、当サイトの情報のご利用等により、何らかの不都合や損失が発生したとしても、当サイトでは一切の責任は負いかねます。\nまた、当サイトに記載した情報は、予告なく、変更や削除される可能性があります。\n不正アクセス禁止法 当サイトでは、様々な情報セキュリティについて記載されていますが、バグバウンティハンター、脆弱性診断士、レッドチーム、セキュリティを学ぶ学生、およびその他のセキュリティの専門家に向けて作成しており、不正アクセス行為を助長するものではありません。\n不正アクセス行為及びそれに準ずる行為は、不正アクセス禁止法により禁止されています。違反者は3年以下の懲役または100万円以下の罰金に処せられます。当サイトの情報を元に、不正アクセス行為またそれに準ずる行為は絶対に行わないでください。\n","description":"","id":0,"section":"","tags":null,"title":"免責事項","uri":"http://blog.yuk1h1ra.me/disclaimer/"},{"content":"プライバシーポリシー 個人情報の管理 当サイトは、取得した個人情報を、お問い合わせいただいた内容についての確認・相談、情報提供のための返信の目的以外には使用しません。また知り得た個人情報を第三者に開示することは、警察・裁判所など公的機関からの書面を持った請求以外に一切利用いたしません。\n","description":"","id":1,"section":"","tags":null,"title":"プライバシーポリシー","uri":"http://blog.yuk1h1ra.me/privacy-policy/"},{"content":"Who am I 当ブログを管理しているYuk1h1raです。\nアイコンがジェイソンマスクですが、ホラーが大の苦手です。もちろん13日の金曜日なんて、怖くて見られません。\n大学ではコンピュータ・サイエンス(CS)を専攻し、在学中に基本情報・応用情報を取得しました。四年次には情報セキュリティの研究室に所属し、マルウェア対策ワークショップであるMWSに、マルウェアの動的解析チームとして参加しました。卒業論文ではPGPにおける脆弱性についての研究を行いました。\n何かご意見・ご要望がありましたら、下記フッターにあるTwitterのDMに連絡ください。\nWhat\u0026rsquo;s this blog 当ブログではセキュリティツールの使い方や、CTFのWriteUP、覚えておいたほうが良いTipsなど、サイバーセキュリティに関する事柄ついて掲載しています。ブログ記事を読む前に 免責事項 を一読し、不正アクセス禁止法に触れないようお願いいたします。\nサイバーセキュリティを学ぶ人達の手助けになれれば幸いです。\n","description":"","id":2,"section":"","tags":null,"title":"About","uri":"http://blog.yuk1h1ra.me/about/"},{"content":"始めに 自分はParrot Security OSを仮想環境下で使用しています。その時にBurpSuiteのWebレンダリング機能がうまく機能していなかったため、その解決方法を記事にしました。\nエラーが起きた際のバージョンを以下に乗せておきます。\n Parrot Security OS: 4.1.0 Burp Suite: 2020.9.1-3995 Burp Suite Community Edition  問題点 Burp SuiteのResponseにて、RenderタブでWebページを表示させようとした際に、Unable to render response や Embedded browser initialization failed のエラーが表示され、Webページを表示されていないことがありました。\n解決法 Burp Suiteの開発元であるPortSwiggerがTwitterにて解決法をツイートしていました。\nHi, if you are running as root are you able to turn off the sandbox under Project options -\u0026gt; Misc -\u0026gt; Embedded Browser -\u0026gt; Allow the embedded browser to run without a sandbox?\n\u0026mdash; Burp Suite (@Burp_Suite) August 18, 2020   https://twitter.com/Burp_Suite/status/1295619292667543552?ref_src=twsrc%5Etfw\n つまり、\nProject options -\u0026gt; Misc -\u0026gt; Embedded Browser -\u0026gt; Allow the embedded browser to run without a sandbox\nにの順にチェックを入れてあげます。\nこれで正しく表示されるようになりました。\n終わりに BurpSuiteを用いて脆弱性診断をする際に、目に見える形で確認したい場合が多々あります。\n今後このようなエラーが起きた際に、この記事が参考になって解決されることを祈っています。\n","description":"","id":3,"section":"posts","tags":["burpsuite","bugbounty","bugfix"],"title":"BurpSuiteのRenderでUnable to render responseが出るときの解決法","uri":"http://blog.yuk1h1ra.me/posts/2020/10/burpsuite-unable-to-render-response/"},{"content":"始めに Webアプリケーションの脆弱性診断をする際にプロキシツールを持ちいて診断をしているかと思います。\n今回はBurpSuiteとWfuzzのwordlistを用いてSQLインジェクションの脆弱性診断の方法を紹介したいと思います。\n脆弱性を含んだマシンの用意 今回はMetasploitable2を用いります。\n以下のサイトからDownloadし、Virtualbox上に構築してください。\n  https://sourceforge.net/projects/metasploitable/\n 構築が終わったらネットワークの設定をしてあげます。\n設定を開き、ネットワークからNATネットワークのチェックを外します。\nアダプター２にチェックをいれて、ホストオンリーアダプターを選択してあげます。\n名前は自分の環境ではvboxnet2です。攻撃用のマシンも同様にホストオンリーアダプターのネットワークを有効にしてください。\n起動したらusernameとpasswordを聞かれますので、どちらも msfadmin でログインします。\nコンソール画面で以下のコマンドでMetasploitable2のIPアドレスを確認します。\ninet addrに続くIPアドレスを確認しておきます。\n1 2 3 4 5  $ ifconfig eth0 (中略) inet addr:172.28.128.X Bcast:172.28.128.255 Mask:255.255.255.0 (中略)   ここまで出来ればMetasploitable2の設定は終了です。\n攻撃用マシンでの作業 ブラウザの設定 先程確認したIPアドレスをブラウザで開きます。\nMutillidaeをクリックします。\nMutillidaeとはOWASP Foundationが提供している、意図的に脆弱なWebアプリケーションになります。\n次に左のメニューから、OWASP Top 10 =\u0026gt; A1 Injection =\u0026gt; SQLi Extract Data =\u0026gt; User Infoを選択してください。\nこちらの画面でSQLインジェクションを行っていきます。\nfoxyproxyの設定 Firefoxの拡張機能であるfoxyproxyがとても便利なのでそちらでプロキシの設定をしてきます。\nFoxyProxyの設定からAddをクリックし、必要な情報を入力していきます。\n今回は以下のように設定しました\n Title: Metasploitable2 Proxy IP: 127.0.0.1 Port: 8080  その後、Save \u0026amp; Edit Patternsをクリックし、Metasploitable2のIPアドレスを設定してSaveします。\n設定が完了したら、先程の画面からMetasploitable2を選択してあげます。\nBurpSuiteの設定 BurpSuiteを開きProxyタブのInterceptをOffにしておきます。\nブラウザをリロードすることで、HTTP historyにきちんと表示されていることを確認してください。\nSQLインジェクション それでは、実際にブラウザでusername:passwordを入力してみましょう。\nすると、エラー文が表示されたと思います。\n今回のWebアプリケーションでは、UsernameとPasswordの組が存在していないとError文が表示される形となっています。\nBurpSuiteを開き、usernameとpasswordを入力したものをIntruderに送りましょう。\nIntruderタブのPositionsにてusernameのみを追加しましょう。\nusernameのみ$で囲まれていれば正解です。\nそれではwfuzzのwordlistを使っていきましょう。\nParrot Security OSを使用しているのであれば、/usr/share/wordlists/wfuzz/injections/SQL.txt というのがあるので、今回はそれを使用していきます。\nPayloadsタブから、Payloads OptionsのLoadから先程のwordlistを選択してあげます。\n右上のStart Attackをしてあげると順次結果が表示されていきます。\nおわりに 今回はwordlistを用いてBurpSuiteのIntruder機能を使ってSQLインジェクションを行いました。\nこれによってSQLインジェクションの確認を手打ちでするのではなく、予め用意しておいたものをloadすることで作業効率のアップが見込まれます。\nしかし、BugBountyなどでは自動でのリクエストを禁止している場合があるため、ルールをよく読んだ上で実行することを勧めます。\n","description":"","id":4,"section":"posts","tags":["burpsuite","wfuzz","bugbounty"],"title":"BurpSuiteとWfuzzのwordlistを用いてSQLインジェクションをしてみた","uri":"http://blog.yuk1h1ra.me/posts/2020/10/burpsuite-wfuzz-sqlinjection/"},{"content":"始めに 脆弱性診断やペネトレーションでよく話題にあげられるMetasploit Frameworkですが、初心者講座などを見てもコマンドの使い方などが部分的に解説してあるだけで本質的な部分が分かりづらいブログ記事が多かったため、自分が実際に調べていてこれは使えそうだというものを幾つかピックアップしてみました。\n想定読者としては、Metasploit Frameworkというものはなんなのかというのをふんわりと理解しているが、実際に使用したことはなく学習したいと考えている初学者を対象としています。\nTryHackMe   https://tryhackme.com/room/rpmetasploit\n TryHackMeというセキュリティ学習サイトにあるMetasploitのRoomになります。\n実際に手を動かしながら学ぶことができるため、最初の取っ掛かりとして学習するのに向いていると思います。\n自分もここのTryHackMeから入り、わからない部分や曖昧な部分を下記のMetasploit Unleashedで確認をしているところです。\nMetasploit Unleashed   https://www.offensive-security.com/metasploit-unleashed/\n Offensive Securityが無料で公開しているMetasploit Frameworkのコースになります。\nMetasploit Frameworkについて体系的にまとめられており、自分がおすすめする中で一番の良い教材だと思っています。\nGithub Wiki   https://github.com/rapid7/metasploit-framework/wiki\n 開発元のRapid7のリポジトリにあるMetasploit FrameworkのWikiになります。\nMetasploit Frameworkの導入方法からHow toまで最新の情報が並んでいるため、こちらも活用するといいと思います。\n","description":"","id":5,"section":"posts","tags":["bugbounty","metasploit"],"title":"Metasploit Frameworkを初心者が学習するのに役立つサイト集","uri":"http://blog.yuk1h1ra.me/posts/2020/10/metasploit-framework/"},{"content":"Metasploitable3 とは Metasploitable3はわざと脆弱性をもたせたマシンです。このマシンに対してToolの検証やexploitを行います。\n普段ペンテストの勉強などをしている際に、有用なツールを見つけたとしてもぶっつけ本番で行うわけには行きません。\nテストをする場所を作り、そこで使い方の勉強をしていったほうがいいです。\n  https://github.com/rapid7/metasploitable3\n 環境構築 構築環境＆バージョン それでは、metasploitable3の環境を構築していきます。\n自分の環境とそれらのバージョンは以下の通りです。\n Host OS: Manjaro Linux x86_64 VirtualBox: 6.1.14 Vagrant: 2.2.10 Packer: 1.6.2  基本的にはgithubに書いてあることをなぞっていくので、よく読んでおくことを勧めます。\nインストール Packer Install Packerのインストールです。\n自分はManjaro Linuxを使っているのでpacmanで一発で入ります。\n1  sudo pacman -S packer   Vagrant Install ありがたいことにvagrantもありました。\nこちらもインストールしていきます。\n1  sudo pacman -S vagrant   Vagrant Reload Plugin Install vagrantのプラグインであるVagrant Reload Pluginをインストールしていきます。\n1  vagrant plugin install vagrant-reload   ここまでは下準備です。\nそれではMetasploitableの環境を構築していきます。\nMetasploit3 Install 今回はrapid7で提供されているビルド済みのイメージを使います。\n自身でビルドする場合もgithubページに書いてあるのでそちらをなぞって構築してもいいでしょう。\n1 2 3  mkdir metasploitable3-workspace cd metasploitable3-workspace curl -O https://raw.githubusercontent.com/rapid7/metasploitable3/master/Vagrantfile \u0026amp;\u0026amp; vagrant up   ただ、2020年9月現在では、Windowsの環境構築の際にエラーが吐かれてしまい、止まってしまいました。\nHow to Fix 止まってしまったときのエラー分が以下になります。\n1 2 3 4 5 6 7  There was an error loading a Vagrantfile. The file being loaded and the error message are shown below. This is usually caused by an invalid or undefined variable. Path: /home/username/.vagrant.d/boxes/rapid7-VAGRANTSLASH-metasploitable3-win2k8/0.1.0-weekly/virtualbox/Vagrantfile Line number: 0 Message: undefined local variable or method `win2k8\u0026#39;   win2k8がないみたいなことを言われていますね。\n調べてみると解決法が見つかりました。\nここからは推測になりますが、rapid7にて提供されているVagrantfileが若干古いor名前が違うみたいで、最初にダウンロードしたVagrantfileとの整合性があっていないように感じます。\nそこをちょちょちょいと修正してあげるとうまく行きます。\n  https://github.com/rapid7/metasploitable3\n Vagrantfileの編集を行います。\n1  nvim ~/.vagrant.d/boxes/rapid7-VAGRANTSLASH-metasploitable3-win2k8/0.1.0-weekly/virtualbox/Vagrantfile   編集後のファイルの中身が以下になります。\n# The contents below were provided by the Packer Vagrant post-processor Vagrant.configure(\u0026quot;2\u0026quot;) do |config| config.vm.base_mac = \u0026quot;080027D0BF18\u0026quot; end # The contents below (if any) are custom contents provided by the # Packer template during image build. # -*- mode: ruby -*- # vi: set ft=ruby : Vagrant.require_version \u0026quot;\u0026gt;= 1.6.2\u0026quot; Vagrant.configure(\u0026quot;2\u0026quot;) do |config| config.vm.synced_folder '.', '/vagrant', disabled: true config.vm.define \u0026quot;win2k8\u0026quot; do |win2k8| win2k8.vm.box = \u0026quot;rapid7/metasploitable3-win2k8\u0026quot; win2k8.vm.hostname = \u0026quot;metasploitable3-win2k8\u0026quot; config.vm.communicator = \u0026quot;winrm\u0026quot; # Admin user name and password config.winrm.username = \u0026quot;vagrant\u0026quot; config.winrm.password = \u0026quot;vagrant\u0026quot; config.vm.guest = :windows config.windows.halt_timeout = 15 config.vm.network :forwarded_port, guest: 3389, host: 3389, id: \u0026quot;rdp\u0026quot;, auto_correct: true config.vm.network :forwarded_port, guest: 22, host: 2222, id: \u0026quot;ssh\u0026quot;, auto_correct: true config.vm.provider :virtualbox do |v, override| #v.gui = true v.customize [\u0026quot;modifyvm\u0026quot;, :id, \u0026quot;--memory\u0026quot;, 2048] v.customize [\u0026quot;modifyvm\u0026quot;, :id, \u0026quot;--cpus\u0026quot;, 2] v.customize [\u0026quot;setextradata\u0026quot;, \u0026quot;global\u0026quot;, \u0026quot;GUI/SuppressMessages\u0026quot;, \u0026quot;all\u0026quot; ] v.customize [\u0026quot;modifyvm\u0026quot;, :id, \u0026quot;--clipboard\u0026quot;, \u0026quot;bidirectional\u0026quot;] end config.vm.provider :vmware_fusion do |v, override| #v.gui = true v.vmx[\u0026quot;memsize\u0026quot;] = \u0026quot;2048\u0026quot; v.vmx[\u0026quot;numvcpus\u0026quot;] = \u0026quot;2\u0026quot; v.vmx[\u0026quot;ethernet0.virtualDev\u0026quot;] = \u0026quot;vmxnet3\u0026quot; v.vmx[\u0026quot;RemoteDisplay.vnc.enabled\u0026quot;] = \u0026quot;false\u0026quot; v.vmx[\u0026quot;RemoteDisplay.vnc.port\u0026quot;] = \u0026quot;5900\u0026quot; v.vmx[\u0026quot;scsi0.virtualDev\u0026quot;] = \u0026quot;lsilogic\u0026quot; end config.vm.provider :vmware_workstation do |v, override| #v.gui = true v.vmx[\u0026quot;memsize\u0026quot;] = \u0026quot;2048\u0026quot; v.vmx[\u0026quot;numvcpus\u0026quot;] = \u0026quot;2\u0026quot; v.vmx[\u0026quot;ethernet0.virtualDev\u0026quot;] = \u0026quot;vmxnet3\u0026quot; v.vmx[\u0026quot;RemoteDisplay.vnc.enabled\u0026quot;] = \u0026quot;false\u0026quot; v.vmx[\u0026quot;RemoteDisplay.vnc.port\u0026quot;] = \u0026quot;5900\u0026quot; v.vmx[\u0026quot;scsi0.virtualDev\u0026quot;] = \u0026quot;lsisas1068\u0026quot; end win2k8.vm.provider \u0026quot;libvirt\u0026quot; do |v| v.memory = \u0026quot;2048\u0026quot; v.cpus = \u0026quot;2\u0026quot; v.video_type = 'qxl' v.input :type =\u0026gt; \u0026quot;tablet\u0026quot;, :bus =\u0026gt; \u0026quot;usb\u0026quot; v.channel :type =\u0026gt; 'unix', :target_name =\u0026gt; 'org.qemu.guest_agent.0', :target_type =\u0026gt; 'virtio' v.channel :type =\u0026gt; 'spicevmc', :target_name =\u0026gt; 'com.redhat.spice.0', :target_type =\u0026gt; 'virtio' v.graphics_type = \u0026quot;spice\u0026quot; # Enable Hyper-V enlightenments: https://blog.wikichoon.com/2014/07/enabling-hyper-v-enlightenments-with-kvm.html v.hyperv_feature :name =\u0026gt; 'stimer', :state =\u0026gt; 'on' v.hyperv_feature :name =\u0026gt; 'relaxed', :state =\u0026gt; 'on' v.hyperv_feature :name =\u0026gt; 'vapic', :state =\u0026gt; 'on' v.hyperv_feature :name =\u0026gt; 'synic', :state =\u0026gt; 'on' end end end 最後に立ち上げて終了です。\n1  vagrant up   ネットワーク設定 自分の環境では、VirtualBoxで攻撃用のマシンを構築しています。\n攻撃用のマシンの構築手順ですが、記事にしてあるのでこちらを参考にしてみてください。\n  https://blog.yuk1h1ra.me/posts/2020/09/install-parrot-security-os/\n いま作ったMetasploitableとのネットワークの設定をしてあげます。\n攻撃用のマシンの設定を開き、ネットワークからホストオンリーアダプタを選択します。\nネットワークはMetasploitable3と同じネットワークにしてあげて完了です。\nおわりに 今回は脆弱性をあえてもたせた仮想マシンの紹介と構築方法についてまとめました。\nこのマシンを使って、ペンテストツールの検証や、自身の勉強に役立てていこうと思います。\n","description":"","id":6,"section":"posts","tags":["bugbounty","tools"],"title":"Metasploitable3の環境構築","uri":"http://blog.yuk1h1ra.me/posts/2020/09/metasploitable3/"},{"content":"Parrot Security OS とは Parrot Security OSはイタリアで開発が行われている、セキュリティとプライバシーを念頭に置いて設計されたDebianベースのGNU/Linuxです。\nペネトレーションテストから、デジタルフォレンジック、リバースエンジニアリングまで、あらゆる種類のサイバーセキュリティ運用のためのツールが含まれています。\nKali Linuxとの違い Kali Linuxとどっちがより良いかなどよく比較されます。\n基本的に含まれているツール群はKaliにあったらParrotにもあります。\nKaliはペネトレーションテストに特化したOSなのに対し、ParrotはHOME版も出しており、普段使いにもできるような印象があります。\nまた、「AnonSurf」というすべての通信をTorを用いて通信を行うようにするアプリケーションは、Kaliにはデフォルトでインストールされていないため、その点ではKaliに勝っています。\nまた、デスクトップ環境にも違いがあります。\nKali LinuxではGnomeを、ParrotではMATEを採用しています。\nVirtualBox上で動かす上で、限られたリソースで動作させなくてはいけないため、軽いデスクトップ環境のMATEのほうが無難です。\n海外のコミュニティなどでも検索をかけてみましたが、Parrotを好んで使っている、Parrotを勧めているようなコメントもありました。\n今までごたごたと語ってきましたが、結局は見た目と好みで選んでいいと思います。\nインストール ISOダウンロード まずはParrotのホームページから、isoをダウンロードしてきてください。\n  https://parrotlinux.org/download/\n MATE版、KDE版、OVA版がありますが、自分で一から設定したいためOVA版はパス。\nMATEとKDEですが、ノートPCなどに直接インストールするのであればKDEもありです。\n自分も普段使いのManjaroLinuxは、KDEを採用しています。\nしかし、VM上に展開するには重い印象があります。\nあと、MATE版はとても綺麗に作られていたのですが、KDE版のデスクトップほとんどデフォルトって感じであまり好みではなかったです。\nKDE版にはそこまで力をいれていないのかなって印象です。\nVirualBoxのマシン作成 1. 新規作成 新しい仮想マシンを作成します。\n2. 名前とオペレーティングシステム 適当に好きな名前をつけます\n3. メモリーサイズ メモリサイズを設定します。\nメモリが2GBとかの化石PCを使ってる人なんてもういないと思うので、4GBとか8GBとか当ててください。\n4.1 ハードディスク 新しく仮想ハードディスクを選択してください。\n4.2 ハードディスクのファイルタイプ 提案されているものそのままで大丈夫です。\n4.3 物理ハードディスクにあるストレージ 書いてあるとおりです。\n今回は可変で作成しますが、固定でもいいです。\nぶっちゃけどちらでもいいです。\n4.4 ファイルの場所とサイズ 自分がいま使っている状況で20GB程度使用しているため、それ以上は絶対必要です。\n自身の空き容量と相談してください。\n無事、新しくマシンが作成されました。\n次は設定に移ります。\nVirtualBoxのマシン設定 一般 高度タブからクリップボード、ドラッグアンドドロップを双方向にしてください。\n後にGuestAdditionsを導入した際に便利になります。\nシステム チップセットをICH9、ポインティングデバイスをUSBマルチタブレットにしてください。\nこれが一番最新の設定らしいです。\nこれが原因で動かないとかはないですが、しておいて損はないです。\nプロセッサ 自分はホストの半分のプロセッサ数を割り振ってます。\nまた、PAE/NXを有効化しておいてください。\nディスプレイ ビデオメモリですが、ディスプレイ数が1の時は128MBが最大です。\nビデオメモリを増やしてあげると、256MBまで増えます。\nワザップですね。\nちなみに、3Dアクセラレーションにもチェックを入れておいてください。\nストレージ ここからディスクファイルを選択し、Parrotのisoイメージを選択してあげてください。\n先程空だったところにisoイメージが挿入されていると思います。\nLive CD/DVDにチェックをいれます。\n一度OKを押し、設定を終了します。\nRe:スクリーン このままではスクリーン数が8のままなので、それを1つにしていきます。\nスクリーン数を変更してもビデオメモリは256MBのままですね！\nグラフィックコントローラー 起動する前に、グラフィックコントローラを変更します。\nこの画面のVMSVGAというところをクリックし、VBoxSVGAを選択してあげます。\nこれで起動する準備が整いました。\n起動しましょう。\n仮想マシンの起動 LiveCDが起動します。十字キーを使ってinstallを選択します。\nGUIでインストールを行いたいため、そちらを選択します。\nここからはマウスが使えるので簡単だと思います。\n日本語を選択しましょう。\n警告が出ますが、日本語の翻訳が追いついてなくて英語になる可能性あるよってだけです。\nはいを選択していいでしょう。\n住んでいる地域を選択します。\nキーボードの設定です。\n自分はUSキーなので米国を選択しますが、日本語も選択できます。\nrootのパスワードの設定画面が開きます。\nユーザの設定です。\nこちらはスペースや大文字が入っても大丈夫です。\nアカウントのユーザ名です。\nこれをもとにディレクトリが作成されるため、半角英数字で設定してあげます。\nパスワードの設定です。\n短すぎると警告を受けた気がするので、長い方がいいです。\nディスクのパーティショニングです。\nディスク全体を使うを選択します。\nこちらで、ディスクがVBoxのものであるか、自分が設定したディスクサイズに近いかどうかを確認してください。\n確認が済んだら続けるでOKです。\nすべてのファイルを１つのパーティションにを選択します。\nスワップスペースについての警告ですが、8Gもメモリ積んでればスワップはいらないので無視します。\nいいえで大丈夫です。\nディスクをこれで作っていいか確認が来るので、はいを選択します。\nディスクにインストールしています。\nコーヒーでも飲んで待ちましょう。\nブートローダーの設定が出てきました。\nOSをブートする際に必要なのではいを選択します。\nVBOXのハードディスクを選択し、続けるで大丈夫です。\nインストールが完了しました。\n続けるを押してください。\nしばらく待っていると、再起動が始まりログイン画面が出てきました。\nお疲れ様でした。VirtualBoxにインストールが完了しています。\nパッケージアップグレード Parrot Security OSではパッケージのアップデートにラッパーコマンドがあります。\n端末を開いて以下のコマンドを実行するだけで自動的にパッケージの更新をしてくれます。\n$ sudo parrot-upgrade ログインした際に毎回確認をして、最新の状態を保つようにしてください。\nまとめ セキュリティ機能に特化したParrot Security OSをVirtualBoxにインストールする手順をまとめました。\n今回vmwareを選択しなかった理由としては、VirtualBoxではスナップショットを取ることができるため、もしマルウェアなどに感染してしまった場合などに過去の状態にすぐに戻ることができるからです。\nCTFや脆弱性診断をする際に、Parrot Security OS 使ってみてください。\n","description":"","id":7,"section":"posts","tags":["bugbounty","linux","setup"],"title":"セキュリティに特化したParrot Security OSをVirtualBoxにインストールするまで","uri":"http://blog.yuk1h1ra.me/posts/2020/09/install-parrot-security-os/"},{"content":"注意 CTFの解法が以下に載っています。自力で解きたい方は解法を見る前にブラウザバックしてください。\n概要 Micro-CMS v1ではMarkdown形式で記述されたものを作成、編集、閲覧などができるサービスでした。\n最初にTesting, Markdown Testというページがありそれらの編集などもできるようなサービスでした。\nFlag0 Create a new pageから試しにページを作成してみると、作成されたページのindexが11であることに気が付きます。\nTesting, Markdown Testは1,2と連番だったのにいきなり11になるのはおかしいと感じ、3~10までindex番号を変更して見てみると、indexが\u0026quot;6\u0026quot;のときだけ403 Forbidden Errorが出ました。\n直接参照する際には権限周りで怒られていましたが、editページに飛んで見ると見事Flagを回収することができました。\nFlag1 Flag1では、編集ページの入力値の改ざんを行うことでFlagを回収することができました。\n入力値はFormの値だけではなく、URLのパスからも意図しない入力値が送られることがあります。\neditページでは数字が入力されるのを期待していましたが、数値以外のもの、シングルクオート(')を与えてあげることでFlagを取得することができました。\nFlag2 みんな大好きXSSです。\n入力を表示させるようなページがある場合はみんな試すと思いますので脳死で\u0026lt;scirpt\u0026gt;alert('XSS');\u0026lt;/scirpt\u0026gt;を入力しましょう。\nしかしXSSが表示されるところは詳細ページでは起こりません。\n入力されたものが影響を与えるのは詳細ページだけではありません。\n今回はTitleにXSSのスクリプトタグを入力してみましょう。\nそして、Homeに戻ってみると、無事Flagが回収することができました。\nFlag3 XSSはscriptタグで囲まれた場所以外にも発生します。\n今回はbuttonからクリックした際にXSSが発生するようにしました。\nWebページによっては\u0026quot;script\u0026quot;という文字列を置換してスクリプトを実行させないようにするようなサイトもありますが、onclickを用いることでscirptという文字列を使用せずにXSSを発生させることができます。\nこちらも無事Flagを回収することができました。\nまとめ 比較的基本に忠実な問題ばかりでした。\nCTF初学者や始めてみたい人にとってWriteUPを見ながらでもいいので解いてみて解き方の感覚を掴むのにもってこいの問題だと思います。\n","description":"","id":8,"section":"posts","tags":["writeup","hacker101","ctf"],"title":"【Hacker101】Micro-CMS V1を解いてみた【WriteUP】","uri":"http://blog.yuk1h1ra.me/posts/2020/06/micro-cms-v1/"},{"content":"hydraとは Hydraはリモート認証サービスをブルートフォースクラッキングをする際によく用いられているツールになります。ftp,http,https,smbなど様々なプロトコルをサポートしています。\nHydraでは並列処理することにより高速にパスワードクラッキングを行うことができます。\n使い方 コマンドラインでの使用法は次のとおりです。\n1  $ hydra [some command line options] [-s PORT] TARGET PROTOCOL [MODULE-OPTIONS]   コマンドラインオプションなどを使用してパスワードやユーザ名などを指定することができます。\nコマンドラインオプションには、以下のようなものを指定することができます。\n1 2 3 4 5  Options: (省略) -l LOGIN or -L FILE login with LOGIN name, or load several logins from FILE -p PASS or -P FILE try password PASS, or load several passwords from FILE (省略)   これらのコマンドラインオプションを使用して、思考するログインユーザ、パスワード、SSLの有無、攻撃に使用する並列タスク数などを指定することができます。\nPROTOCOLは、攻撃にしようするプロトコルです。ftp,smtp,http-getなど様々なものを指定することができます。\nまた、サポートされているプロトコルにも様々なものがあり、プロトコル毎に特別なオプションがあります。\nプロトコル毎の詳しいオプションを確認するには、以下のコマンドのように使用します。\n1 2 3 4 5 6  $ hydra -U http-post-form (省略) Examples: \u0026#34;/login.php:user=^USER^\u0026amp;pass=^PASS^:incorrect\u0026#34; \u0026#34;/login.php:user=^USER64^\u0026amp;pass=^PASS64^\u0026amp;colon=colon\\:escape:S=authlog=.*success\u0026#34; (省略)   実験 今回はHacker101のPetshop Proを対象にしていきます。\nPetshop Proのログイン画面は以下の様になっています。\nここで適当なadmin:adminなどでログイン試行した結果がこちらです。\nInvalid usernameという文字列が表示されました。こちらが今回正しくログインできなかったときの識別として用います。\nhydraでhttp-post-formを用いてusernameの総当りをしていきます。\nusernameの総当りをしていくにあたり適当なwordlistを指定してあげます。\n無事usernameがdulceのときInvalid usernameが表示されないことがわかりました。\nブラウザでdelce:adminでログイン試行してみると\nとなり、passwordが異なることがわかりました。\n続いて、パスワードも同様に総当りで試行していきます。\n無事パスワードもわかったのでログインしてみます。\nフラグが表示され、ログイン完了したことがわかります。\nまとめ Hydraを用いることでログインの総当りをすることができることがわかりました。\nしかし、今回用いられたusername:passwordがwordlistになければいたずらに時間が使われることもわかります。\nまた、hydraは許可された環境下でのみ使用をしてください。\n","description":"","id":9,"section":"posts","tags":["tools","bugbounty","how-to"],"title":"ログインクラッカー「Hydra」の使い方","uri":"http://blog.yuk1h1ra.me/posts/2020/05/how-to-use-hydra/"},{"content":"DirBusterとは DirBusterは、Web/アプリケーションサーバー上のディレクトリとファイル名を総当りで検索するアプリケーションです。Webアプリケーションにはリンクから辿れない数多くのページやアプリケーションが隠されています。DirBusterはこれらを総当りで見つけるためのツールです。\nDirBusterの簡単な使い方を次に紹介します。\nStep1 DirBusterの起動 Parrot Security OSではデフォルトでインストールされているため、そちらを起動します。\nStep2 URLを指定 対象のWebアプリケーションのURLを指定してあげます。\n今回は、Hacker101のPetshopProを対象にしていきます。\n今回対象のWebアプリケーションはhttp://35.227.24.107/02dcccde7d/となるため、それを入力します。\nStep3 リストの選択 Scanする際に単純なBruteForceも可能ですが、あらかじめ用意されたリストを使用してそのリストをぶん回していく方法があります。今回はそのリストを使用します。\nDirBusterには /usr/share/dirbuster/wordlists/ の中にいくつかのリストがあるためそちらを使用します\nStep4 実行 準備ができたらStartを押して実行します。\n設定の際にFile extensionやUse Blank ExtensionにチェックをいれることでScanする対象を選択することができます。\n今回は時間の短縮のためScanの必要のないディレクトリは停止させたりしています。\nStep５ 結果 タブのResultに今までのスキャン結果が出ています。\n今回のWebアプリケーションでは管理画面であるloginページは通常ではたどり着くことができませんでしたが、DirBusterを用いてスキャンすることで見事見つけることができました。\n総括 DirBusterを用いれば秘匿されたWebアプリケーションのディレクトリやファイルの検索を行うことができます。\nしかし、BruteForceでの検索となるため、目的のファイルやディレクトリを発見するのに時間がかかることがわかります。\nまたサービスに多量のリクエストが送られるため、許可された環境下でのみ使用してください。\n","description":"","id":10,"section":"posts","tags":["bugbounty","tools","how-to"],"title":"Webアプリ上のディレクトリ/ファイル名を総当りで検索する「DirBuster」の紹介","uri":"http://blog.yuk1h1ra.me/posts/2020/05/dirbuster/"}]